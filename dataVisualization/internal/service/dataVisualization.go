// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	dataVisualizationV1 "dataVisualization/api/dataVisualization/v1"
	"dataVisualization/internal/cache"
	"dataVisualization/internal/dao"
	"dataVisualization/internal/ecode"
	"dataVisualization/internal/model"
	"errors"
	"github.com/zhufuyi/sponge/pkg/errcode"
	"github.com/zhufuyi/sponge/pkg/ggorm/query"
	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
	//"dataVisualization/internal/cache"
	//"dataVisualization/internal/dao"
	//"dataVisualization/internal/ecode"
	//"dataVisualization/internal/model"

	//"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	//"github.com/zhufuyi/sponge/pkg/logger"

	"google.golang.org/grpc"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		dataVisualizationV1.RegisterDataVisualizationServer(server, NewDataVisualizationServer())
	})
}

var _ dataVisualizationV1.DataVisualizationServer = (*dataVisualization)(nil)

type dataVisualization struct {
	dataVisualizationV1.UnimplementedDataVisualizationServer

	// example:
	//		iDao dao.DataVisualizationDao
	userDeviceDao  dao.UserDeviceDao
	deviceDao      dao.DeviceDao
	deviceTypeDao  dao.DeviceTypeDao
	deviceDaoModel dao.DeviceDataModelDao
}

// NewDataVisualizationServer create a server
func NewDataVisualizationServer() dataVisualizationV1.DataVisualizationServer {
	return &dataVisualization{
		// example:
		//		iDao: dao.NewDataVisualizationDao(
		//			model.GetDB(),
		//			cache.NewDataVisualizationCache(model.GetCacheType()),
		//		),
		userDeviceDao:  dao.NewUserDeviceDao(model.GetDB(), cache.NewUserDeviceCache(model.GetCacheType())),
		deviceDao:      dao.NewDeviceDao(model.GetDB(), cache.NewDeviceCache(model.GetCacheType())),
		deviceTypeDao:  dao.NewDeviceTypeDao(model.GetDB(), cache.NewDeviceTypeCache(model.GetCacheType())),
		deviceDaoModel: dao.NewDeviceDataModelDao(model.GetDB(), cache.NewDeviceDataModelCache(model.GetCacheType())),
	}
}

// log
//
//	@Description: 日志打印
//	@Author zzh
//	@param msg
//	@param rpcErr
//	@param err
//	@param field
//	@param ctx
//	@return *errcode.RPCStatus
func log(ctx context.Context, msg string, rpcErr *errcode.RPCStatus, err error, key string, val interface{}) error {

	logger.Info(msg, logger.Err(err), logger.Any(key, val), interceptor.ServerCtxRequestIDField(ctx))

	return rpcErr.Err()
}

// DeviceDataGet ......
func (s *dataVisualization) DeviceDataGet(ctx context.Context, req *dataVisualizationV1.DeviceDataGetReq) (*dataVisualizationV1.DeviceDataGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	//查询设备
	deviceCondition := &query.Conditions{}
	if len(req.Code) != 0 {
		deviceCondition.Columns = append(deviceCondition.Columns, query.Column{
			Name:  "code",
			Value: req.Code,
		})
	}
	if len(req.Name) != 0 {
		deviceCondition.Columns = append(deviceCondition.Columns, query.Column{
			Name:  "name",
			Value: req.Name,
		})
	}
	deviceInfo, err := s.deviceDao.GetByCondition(context.Background(), deviceCondition)
	if err != nil {
		logger.Warn("DeviceDataGet error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, log(ctx, "dataVisualization.DeviceDataGet.deviceDao.GetByCondition error", ecode.StatusInvalidParams, err, "req", req)
	}

	//检查当前用户是否可以访问此设备数据
	userDeviceCondition := &query.Conditions{Columns: []query.Column{
		{
			Name:  "user_id",
			Value: req.UserId,
		},
		{
			Name:  "device_id",
			Value: deviceInfo.ID,
		},
	}}
	_, err = s.userDeviceDao.GetByCondition(context.Background(), userDeviceCondition)
	if err != nil {
		logger.Warn("DeviceDataGet error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, log(ctx, "dataVisualization.DeviceDataGet.userDeviceDao.GetByCondition error", ecode.StatusInvalidParams, err, "req", req)
	}
	deviceDataInfo, count, err := s.deviceDaoModel.GetDeviceDataByColumns(context.Background(), s.buildDeviceDataParams(req), deviceInfo.Code)
	if err != nil {
		logger.Warn("DeviceDataGet error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, log(ctx, "dataVisualization.DeviceDataGet.deviceDaoModel.GetDeviceData error", ecode.StatusInvalidParams, err, "req", req)
	}

	return &dataVisualizationV1.DeviceDataGetRes{
		Name:  deviceInfo.Name,
		Code:  deviceInfo.Code,
		Data:  s.buildDeviceDataGetRes(deviceDataInfo),
		Count: uint64(count),
	}, nil
}

// DeviceDataCurve ......
func (s *dataVisualization) DeviceDataCurve(ctx context.Context, req *dataVisualizationV1.DeviceDataCurveReq) (*dataVisualizationV1.DeviceDataCurveRes, error) {
	//panic("implement me")

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	if req.Interval == dataVisualizationV1.IntervalType_Null {
		return nil, ecode.StatusInvalidParams.Err()
	}

	// 查询可以访问的设备
	userDeviceParams := &query.Params{Columns: []query.Column{
		{
			Name:  "user_id",
			Value: req.UserId,
		},
	}}

	userDeviceInfo, _, err := s.userDeviceDao.GetByColumns(context.Background(), userDeviceParams)
	if err != nil {
		return nil, log(ctx, "no authorization", ecode.StatusInvalidParams, err, "", nil)
	}

	var deviceIds []uint64
	for _, userDevice := range userDeviceInfo {
		deviceIds = append(deviceIds, userDevice.DeviceID)
	}

	var errs error
	var chartInfo = &dataVisualizationV1.DeviceDataCurveRes{}
	for _, chartType := range req.ChartType {
		switch chartType {
		case dataVisualizationV1.ChartType_ChartTypeNull:
			return nil, log(ctx, "not support", ecode.StatusInvalidParams, errors.New("not support"), "", nil)
		case dataVisualizationV1.ChartType_Pip:
			//饼图
			chartInfo.Pip, err = s.getDeviceDataPipChart(ctx, deviceIds)
			errs = errors.Join(err)
		case dataVisualizationV1.ChartType_Line:
			//折线图
			//chartInfo.Line, err = s.getDeviceDataCurveByInterval(ctx, deviceIds, req.Interval)
			chartInfo.Elect, chartInfo.Volt, err = s.getElectLine(ctx, deviceIds)
			errs = errors.Join(err)
		}
	}

	if errs != nil {
		return chartInfo, log(ctx, err.Error(), ecode.StatusInternalServerError, err, "", nil)
	}

	return chartInfo, nil
}
