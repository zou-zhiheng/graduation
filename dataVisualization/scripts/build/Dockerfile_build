# Need to package the code first `tar zcf dataVisualization.tar.gz $(ls)` and move it to the same directory as Dokerfile

# Compile the go code, you can specify the golang version
FROM golang:1.21-alpine as build
COPY . /go/src/dataVisualization
WORKDIR /go/src/dataVisualization
RUN tar zxf dataVisualization.tar.gz
RUN go env -w GOPROXY=https://goproxy.cn,direct
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o /dataVisualization cmd/dataVisualization/main.go

# install grpc-health-probe, for health check of grpc service
RUN go install github.com/grpc-ecosystem/grpc-health-probe@v0.4.12
RUN cd $GOPATH/pkg/mod/github.com/grpc-ecosystem/grpc-health-probe@v0.4.12 \
    && go mod download \
    && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "all=-s -w" -o /grpc_health_probe

# compressing binary files
#cd /
#upx -9 dataVisualization
#upx -9 grpc_health_probe


# building images with binary
FROM alpine:latest
MAINTAINER zhufuyi "g.zhufuyi@gmail.com"

# set the time zone to Shanghai
RUN apk add tzdata  \
    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && echo "Asia/Shanghai" > /etc/timezone \
    && apk del tzdata

# add grpc_health_probe for health check of grpc services
COPY --from=build /grpc_health_probe /bin/grpc_health_probe
COPY --from=build /dataVisualization /app/dataVisualization
COPY --from=build /go/src/dataVisualization/configs/dataVisualization.yml /app/configs/dataVisualization.yml

# grpc and http port
EXPOSE 8282 8283


WORKDIR /app

CMD ["./dataVisualization", "-c", "configs/dataVisualization.yml"]
# if you use the Configuration Center, dataVisualization.yml is changed to the Configuration Center configuration.
#CMD ["./dataVisualization", "-c", "configs/dataVisualization.yml", "-enable-cc"]
