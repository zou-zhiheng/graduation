// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gateway/v1/manager.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Account

	// no validation rules for AvatarUrl

	// no validation rules for IsValid

	// no validation rules for Sex

	// no validation rules for Phone

	// no validation rules for RoleId

	// no validation rules for Password

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResMultiError, or nil
// if none found.
func (m *LoginRes) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResMultiError(errors)
	}

	return nil
}

// LoginResMultiError is an error wrapping multiple validation errors returned
// by LoginRes.ValidateAll() if the designated constraints aren't met.
type LoginResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResMultiError) AllErrors() []error { return m }

// LoginResValidationError is the validation error returned by
// LoginRes.Validate if the designated constraints aren't met.
type LoginResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResValidationError) ErrorName() string { return "LoginResValidationError" }

// Error satisfies the builtin error interface
func (e LoginResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResValidationError{}

// Validate checks the field values on UserRegisterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReqMultiError, or nil if none found.
func (m *UserRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Account

	// no validation rules for AvatarUrl

	// no validation rules for IsValid

	// no validation rules for Sex

	// no validation rules for Phone

	// no validation rules for Password

	if len(errors) > 0 {
		return UserRegisterReqMultiError(errors)
	}

	return nil
}

// UserRegisterReqMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReq.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReqMultiError) AllErrors() []error { return m }

// UserRegisterReqValidationError is the validation error returned by
// UserRegisterReq.Validate if the designated constraints aren't met.
type UserRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReqValidationError) ErrorName() string { return "UserRegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReqValidationError{}

// Validate checks the field values on UserGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetReqMultiError, or
// nil if none found.
func (m *UserGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for CurrPage

	// no validation rules for PageSize

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return UserGetReqMultiError(errors)
	}

	return nil
}

// UserGetReqMultiError is an error wrapping multiple validation errors
// returned by UserGetReq.ValidateAll() if the designated constraints aren't met.
type UserGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetReqMultiError) AllErrors() []error { return m }

// UserGetReqValidationError is the validation error returned by
// UserGetReq.Validate if the designated constraints aren't met.
type UserGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetReqValidationError) ErrorName() string { return "UserGetReqValidationError" }

// Error satisfies the builtin error interface
func (e UserGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetReqValidationError{}

// Validate checks the field values on UserGetRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetResMultiError, or
// nil if none found.
func (m *UserGetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserGetResValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserGetResValidationError{
						field:  fmt.Sprintf("User[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserGetResValidationError{
					field:  fmt.Sprintf("User[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return UserGetResMultiError(errors)
	}

	return nil
}

// UserGetResMultiError is an error wrapping multiple validation errors
// returned by UserGetRes.ValidateAll() if the designated constraints aren't met.
type UserGetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResMultiError) AllErrors() []error { return m }

// UserGetResValidationError is the validation error returned by
// UserGetRes.Validate if the designated constraints aren't met.
type UserGetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResValidationError) ErrorName() string { return "UserGetResValidationError" }

// Error satisfies the builtin error interface
func (e UserGetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResValidationError{}

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateReqMultiError, or
// nil if none found.
func (m *UserUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Account

	// no validation rules for AvatarUrl

	// no validation rules for IsValid

	// no validation rules for Sex

	// no validation rules for Phone

	if len(errors) > 0 {
		return UserUpdateReqMultiError(errors)
	}

	return nil
}

// UserUpdateReqMultiError is an error wrapping multiple validation errors
// returned by UserUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateReqMultiError) AllErrors() []error { return m }

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

// Validate checks the field values on ResetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReqMultiError, or nil if none found.
func (m *ResetPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Account

	// no validation rules for AvatarUrl

	// no validation rules for IsValid

	// no validation rules for Sex

	// no validation rules for Phone

	// no validation rules for RoleId

	// no validation rules for Password

	if len(errors) > 0 {
		return ResetPasswordReqMultiError(errors)
	}

	return nil
}

// ResetPasswordReqMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReqMultiError) AllErrors() []error { return m }

// ResetPasswordReqValidationError is the validation error returned by
// ResetPasswordReq.Validate if the designated constraints aren't met.
type ResetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReqValidationError) ErrorName() string { return "ResetPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReqValidationError{}

// Validate checks the field values on UserDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDeleteReqMultiError, or
// nil if none found.
func (m *UserDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Account

	// no validation rules for AvatarUrl

	// no validation rules for IsValid

	// no validation rules for Sex

	// no validation rules for Phone

	// no validation rules for RoleId

	// no validation rules for Password

	if len(errors) > 0 {
		return UserDeleteReqMultiError(errors)
	}

	return nil
}

// UserDeleteReqMultiError is an error wrapping multiple validation errors
// returned by UserDeleteReq.ValidateAll() if the designated constraints
// aren't met.
type UserDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteReqMultiError) AllErrors() []error { return m }

// UserDeleteReqValidationError is the validation error returned by
// UserDeleteReq.Validate if the designated constraints aren't met.
type UserDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteReqValidationError) ErrorName() string { return "UserDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeleteReqValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Desc

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on RoleCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleCreateReqMultiError, or
// nil if none found.
func (m *RoleCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Desc

	if len(errors) > 0 {
		return RoleCreateReqMultiError(errors)
	}

	return nil
}

// RoleCreateReqMultiError is an error wrapping multiple validation errors
// returned by RoleCreateReq.ValidateAll() if the designated constraints
// aren't met.
type RoleCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleCreateReqMultiError) AllErrors() []error { return m }

// RoleCreateReqValidationError is the validation error returned by
// RoleCreateReq.Validate if the designated constraints aren't met.
type RoleCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleCreateReqValidationError) ErrorName() string { return "RoleCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleCreateReqValidationError{}

// Validate checks the field values on RoleGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGetReqMultiError, or
// nil if none found.
func (m *RoleGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for CurrPage

	// no validation rules for PageSize

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return RoleGetReqMultiError(errors)
	}

	return nil
}

// RoleGetReqMultiError is an error wrapping multiple validation errors
// returned by RoleGetReq.ValidateAll() if the designated constraints aren't met.
type RoleGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetReqMultiError) AllErrors() []error { return m }

// RoleGetReqValidationError is the validation error returned by
// RoleGetReq.Validate if the designated constraints aren't met.
type RoleGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetReqValidationError) ErrorName() string { return "RoleGetReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetReqValidationError{}

// Validate checks the field values on RoleGetRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGetResMultiError, or
// nil if none found.
func (m *RoleGetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRole() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleGetResValidationError{
						field:  fmt.Sprintf("Role[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleGetResValidationError{
						field:  fmt.Sprintf("Role[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleGetResValidationError{
					field:  fmt.Sprintf("Role[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return RoleGetResMultiError(errors)
	}

	return nil
}

// RoleGetResMultiError is an error wrapping multiple validation errors
// returned by RoleGetRes.ValidateAll() if the designated constraints aren't met.
type RoleGetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetResMultiError) AllErrors() []error { return m }

// RoleGetResValidationError is the validation error returned by
// RoleGetRes.Validate if the designated constraints aren't met.
type RoleGetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetResValidationError) ErrorName() string { return "RoleGetResValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetResValidationError{}

// Validate checks the field values on RoleUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleUpdateReqMultiError, or
// nil if none found.
func (m *RoleUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Desc

	if len(errors) > 0 {
		return RoleUpdateReqMultiError(errors)
	}

	return nil
}

// RoleUpdateReqMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateReqMultiError) AllErrors() []error { return m }

// RoleUpdateReqValidationError is the validation error returned by
// RoleUpdateReq.Validate if the designated constraints aren't met.
type RoleUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateReqValidationError) ErrorName() string { return "RoleUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateReqValidationError{}

// Validate checks the field values on RoleDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleDeleteReqMultiError, or
// nil if none found.
func (m *RoleDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Desc

	if len(errors) > 0 {
		return RoleDeleteReqMultiError(errors)
	}

	return nil
}

// RoleDeleteReqMultiError is an error wrapping multiple validation errors
// returned by RoleDeleteReq.ValidateAll() if the designated constraints
// aren't met.
type RoleDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDeleteReqMultiError) AllErrors() []error { return m }

// RoleDeleteReqValidationError is the validation error returned by
// RoleDeleteReq.Validate if the designated constraints aren't met.
type RoleDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDeleteReqValidationError) ErrorName() string { return "RoleDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDeleteReqValidationError{}

// Validate checks the field values on Api with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Api) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Api with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiMultiError, or nil if none found.
func (m *Api) ValidateAll() error {
	return m.validate(true)
}

func (m *Api) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for Desc

	if len(errors) > 0 {
		return ApiMultiError(errors)
	}

	return nil
}

// ApiMultiError is an error wrapping multiple validation errors returned by
// Api.ValidateAll() if the designated constraints aren't met.
type ApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiMultiError) AllErrors() []error { return m }

// ApiValidationError is the validation error returned by Api.Validate if the
// designated constraints aren't met.
type ApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiValidationError) ErrorName() string { return "ApiValidationError" }

// Error satisfies the builtin error interface
func (e ApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiValidationError{}

// Validate checks the field values on ApiCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiCreateReqMultiError, or
// nil if none found.
func (m *ApiCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for Desc

	if len(errors) > 0 {
		return ApiCreateReqMultiError(errors)
	}

	return nil
}

// ApiCreateReqMultiError is an error wrapping multiple validation errors
// returned by ApiCreateReq.ValidateAll() if the designated constraints aren't met.
type ApiCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiCreateReqMultiError) AllErrors() []error { return m }

// ApiCreateReqValidationError is the validation error returned by
// ApiCreateReq.Validate if the designated constraints aren't met.
type ApiCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiCreateReqValidationError) ErrorName() string { return "ApiCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e ApiCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiCreateReqValidationError{}

// Validate checks the field values on ApiGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiGetReqMultiError, or nil
// if none found.
func (m *ApiGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for PageSize

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for CurrPage

	if len(errors) > 0 {
		return ApiGetReqMultiError(errors)
	}

	return nil
}

// ApiGetReqMultiError is an error wrapping multiple validation errors returned
// by ApiGetReq.ValidateAll() if the designated constraints aren't met.
type ApiGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiGetReqMultiError) AllErrors() []error { return m }

// ApiGetReqValidationError is the validation error returned by
// ApiGetReq.Validate if the designated constraints aren't met.
type ApiGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiGetReqValidationError) ErrorName() string { return "ApiGetReqValidationError" }

// Error satisfies the builtin error interface
func (e ApiGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiGetReqValidationError{}

// Validate checks the field values on ApiGetRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiGetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiGetRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiGetResMultiError, or nil
// if none found.
func (m *ApiGetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiGetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApi() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiGetResValidationError{
						field:  fmt.Sprintf("Api[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiGetResValidationError{
						field:  fmt.Sprintf("Api[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiGetResValidationError{
					field:  fmt.Sprintf("Api[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ApiGetResMultiError(errors)
	}

	return nil
}

// ApiGetResMultiError is an error wrapping multiple validation errors returned
// by ApiGetRes.ValidateAll() if the designated constraints aren't met.
type ApiGetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiGetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiGetResMultiError) AllErrors() []error { return m }

// ApiGetResValidationError is the validation error returned by
// ApiGetRes.Validate if the designated constraints aren't met.
type ApiGetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiGetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiGetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiGetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiGetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiGetResValidationError) ErrorName() string { return "ApiGetResValidationError" }

// Error satisfies the builtin error interface
func (e ApiGetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiGetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiGetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiGetResValidationError{}

// Validate checks the field values on ApiUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiUpdateReqMultiError, or
// nil if none found.
func (m *ApiUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Method

	// no validation rules for Desc

	if len(errors) > 0 {
		return ApiUpdateReqMultiError(errors)
	}

	return nil
}

// ApiUpdateReqMultiError is an error wrapping multiple validation errors
// returned by ApiUpdateReq.ValidateAll() if the designated constraints aren't met.
type ApiUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiUpdateReqMultiError) AllErrors() []error { return m }

// ApiUpdateReqValidationError is the validation error returned by
// ApiUpdateReq.Validate if the designated constraints aren't met.
type ApiUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiUpdateReqValidationError) ErrorName() string { return "ApiUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e ApiUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiUpdateReqValidationError{}

// Validate checks the field values on ApiDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiDeleteReqMultiError, or
// nil if none found.
func (m *ApiDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ApiDeleteReqMultiError(errors)
	}

	return nil
}

// ApiDeleteReqMultiError is an error wrapping multiple validation errors
// returned by ApiDeleteReq.ValidateAll() if the designated constraints aren't met.
type ApiDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiDeleteReqMultiError) AllErrors() []error { return m }

// ApiDeleteReqValidationError is the validation error returned by
// ApiDeleteReq.Validate if the designated constraints aren't met.
type ApiDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiDeleteReqValidationError) ErrorName() string { return "ApiDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e ApiDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiDeleteReqValidationError{}

// Validate checks the field values on OperationRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OperationRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperationRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperationResMultiError, or
// nil if none found.
func (m *OperationRes) ValidateAll() error {
	return m.validate(true)
}

func (m *OperationRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Msg

	if len(errors) > 0 {
		return OperationResMultiError(errors)
	}

	return nil
}

// OperationResMultiError is an error wrapping multiple validation errors
// returned by OperationRes.ValidateAll() if the designated constraints aren't met.
type OperationResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperationResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperationResMultiError) AllErrors() []error { return m }

// OperationResValidationError is the validation error returned by
// OperationRes.Validate if the designated constraints aren't met.
type OperationResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationResValidationError) ErrorName() string { return "OperationResValidationError" }

// Error satisfies the builtin error interface
func (e OperationResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperationRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationResValidationError{}

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for DeviceTypeId

	// no validation rules for DeviceTypeName

	// no validation rules for State

	// no validation rules for CheckTime

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on DeviceCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceCreateReqMultiError, or nil if none found.
func (m *DeviceCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for DeviceTypeId

	// no validation rules for CheckTime

	if len(errors) > 0 {
		return DeviceCreateReqMultiError(errors)
	}

	return nil
}

// DeviceCreateReqMultiError is an error wrapping multiple validation errors
// returned by DeviceCreateReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceCreateReqMultiError) AllErrors() []error { return m }

// DeviceCreateReqValidationError is the validation error returned by
// DeviceCreateReq.Validate if the designated constraints aren't met.
type DeviceCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceCreateReqValidationError) ErrorName() string { return "DeviceCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceCreateReqValidationError{}

// Validate checks the field values on DeviceGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceGetReqMultiError, or
// nil if none found.
func (m *DeviceGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Protocol

	// no validation rules for DeviceTypeName

	// no validation rules for State

	// no validation rules for PageSize

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for CurrPage

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceGetReqMultiError(errors)
	}

	return nil
}

// DeviceGetReqMultiError is an error wrapping multiple validation errors
// returned by DeviceGetReq.ValidateAll() if the designated constraints aren't met.
type DeviceGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceGetReqMultiError) AllErrors() []error { return m }

// DeviceGetReqValidationError is the validation error returned by
// DeviceGetReq.Validate if the designated constraints aren't met.
type DeviceGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceGetReqValidationError) ErrorName() string { return "DeviceGetReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceGetReqValidationError{}

// Validate checks the field values on DeviceGetRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceGetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceGetRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceGetResMultiError, or
// nil if none found.
func (m *DeviceGetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceGetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevice() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceGetResValidationError{
						field:  fmt.Sprintf("Device[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceGetResValidationError{
						field:  fmt.Sprintf("Device[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceGetResValidationError{
					field:  fmt.Sprintf("Device[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return DeviceGetResMultiError(errors)
	}

	return nil
}

// DeviceGetResMultiError is an error wrapping multiple validation errors
// returned by DeviceGetRes.ValidateAll() if the designated constraints aren't met.
type DeviceGetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceGetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceGetResMultiError) AllErrors() []error { return m }

// DeviceGetResValidationError is the validation error returned by
// DeviceGetRes.Validate if the designated constraints aren't met.
type DeviceGetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceGetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceGetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceGetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceGetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceGetResValidationError) ErrorName() string { return "DeviceGetResValidationError" }

// Error satisfies the builtin error interface
func (e DeviceGetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceGetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceGetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceGetResValidationError{}

// Validate checks the field values on DeviceUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceUpdateReqMultiError, or nil if none found.
func (m *DeviceUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for DeviceTypeId

	// no validation rules for CheckTime

	if len(errors) > 0 {
		return DeviceUpdateReqMultiError(errors)
	}

	return nil
}

// DeviceUpdateReqMultiError is an error wrapping multiple validation errors
// returned by DeviceUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceUpdateReqMultiError) AllErrors() []error { return m }

// DeviceUpdateReqValidationError is the validation error returned by
// DeviceUpdateReq.Validate if the designated constraints aren't met.
type DeviceUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceUpdateReqValidationError) ErrorName() string { return "DeviceUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceUpdateReqValidationError{}

// Validate checks the field values on DeviceDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceDeleteReqMultiError, or nil if none found.
func (m *DeviceDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceDeleteReqMultiError(errors)
	}

	return nil
}

// DeviceDeleteReqMultiError is an error wrapping multiple validation errors
// returned by DeviceDeleteReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDeleteReqMultiError) AllErrors() []error { return m }

// DeviceDeleteReqValidationError is the validation error returned by
// DeviceDeleteReq.Validate if the designated constraints aren't met.
type DeviceDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDeleteReqValidationError) ErrorName() string { return "DeviceDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDeleteReqValidationError{}

// Validate checks the field values on DeviceDataReceiveReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceDataReceiveReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDataReceiveReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceDataReceiveReqMultiError, or nil if none found.
func (m *DeviceDataReceiveReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDataReceiveReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceDataReceiveReqValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceDataReceiveReqValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceDataReceiveReqValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceDataReceiveReqMultiError(errors)
	}

	return nil
}

// DeviceDataReceiveReqMultiError is an error wrapping multiple validation
// errors returned by DeviceDataReceiveReq.ValidateAll() if the designated
// constraints aren't met.
type DeviceDataReceiveReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDataReceiveReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDataReceiveReqMultiError) AllErrors() []error { return m }

// DeviceDataReceiveReqValidationError is the validation error returned by
// DeviceDataReceiveReq.Validate if the designated constraints aren't met.
type DeviceDataReceiveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDataReceiveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDataReceiveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDataReceiveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDataReceiveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDataReceiveReqValidationError) ErrorName() string {
	return "DeviceDataReceiveReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceDataReceiveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDataReceiveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDataReceiveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDataReceiveReqValidationError{}

// Validate checks the field values on DeviceType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceTypeMultiError, or
// nil if none found.
func (m *DeviceType) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Describe

	if len(errors) > 0 {
		return DeviceTypeMultiError(errors)
	}

	return nil
}

// DeviceTypeMultiError is an error wrapping multiple validation errors
// returned by DeviceType.ValidateAll() if the designated constraints aren't met.
type DeviceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceTypeMultiError) AllErrors() []error { return m }

// DeviceTypeValidationError is the validation error returned by
// DeviceType.Validate if the designated constraints aren't met.
type DeviceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceTypeValidationError) ErrorName() string { return "DeviceTypeValidationError" }

// Error satisfies the builtin error interface
func (e DeviceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceTypeValidationError{}

// Validate checks the field values on DeviceTypeCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceTypeCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceTypeCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceTypeCreateReqMultiError, or nil if none found.
func (m *DeviceTypeCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceTypeCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Describe

	if len(errors) > 0 {
		return DeviceTypeCreateReqMultiError(errors)
	}

	return nil
}

// DeviceTypeCreateReqMultiError is an error wrapping multiple validation
// errors returned by DeviceTypeCreateReq.ValidateAll() if the designated
// constraints aren't met.
type DeviceTypeCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceTypeCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceTypeCreateReqMultiError) AllErrors() []error { return m }

// DeviceTypeCreateReqValidationError is the validation error returned by
// DeviceTypeCreateReq.Validate if the designated constraints aren't met.
type DeviceTypeCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceTypeCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceTypeCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceTypeCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceTypeCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceTypeCreateReqValidationError) ErrorName() string {
	return "DeviceTypeCreateReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceTypeCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceTypeCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceTypeCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceTypeCreateReqValidationError{}

// Validate checks the field values on DeviceTypeGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceTypeGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceTypeGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceTypeGetReqMultiError, or nil if none found.
func (m *DeviceTypeGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceTypeGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for PageSize

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for CurrPage

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceTypeGetReqMultiError(errors)
	}

	return nil
}

// DeviceTypeGetReqMultiError is an error wrapping multiple validation errors
// returned by DeviceTypeGetReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceTypeGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceTypeGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceTypeGetReqMultiError) AllErrors() []error { return m }

// DeviceTypeGetReqValidationError is the validation error returned by
// DeviceTypeGetReq.Validate if the designated constraints aren't met.
type DeviceTypeGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceTypeGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceTypeGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceTypeGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceTypeGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceTypeGetReqValidationError) ErrorName() string { return "DeviceTypeGetReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceTypeGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceTypeGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceTypeGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceTypeGetReqValidationError{}

// Validate checks the field values on DeviceTypeGetRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceTypeGetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceTypeGetRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceTypeGetResMultiError, or nil if none found.
func (m *DeviceTypeGetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceTypeGetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeviceType() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceTypeGetResValidationError{
						field:  fmt.Sprintf("DeviceType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceTypeGetResValidationError{
						field:  fmt.Sprintf("DeviceType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceTypeGetResValidationError{
					field:  fmt.Sprintf("DeviceType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return DeviceTypeGetResMultiError(errors)
	}

	return nil
}

// DeviceTypeGetResMultiError is an error wrapping multiple validation errors
// returned by DeviceTypeGetRes.ValidateAll() if the designated constraints
// aren't met.
type DeviceTypeGetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceTypeGetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceTypeGetResMultiError) AllErrors() []error { return m }

// DeviceTypeGetResValidationError is the validation error returned by
// DeviceTypeGetRes.Validate if the designated constraints aren't met.
type DeviceTypeGetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceTypeGetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceTypeGetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceTypeGetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceTypeGetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceTypeGetResValidationError) ErrorName() string { return "DeviceTypeGetResValidationError" }

// Error satisfies the builtin error interface
func (e DeviceTypeGetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceTypeGetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceTypeGetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceTypeGetResValidationError{}

// Validate checks the field values on DeviceTypeUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceTypeUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceTypeUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceTypeUpdateReqMultiError, or nil if none found.
func (m *DeviceTypeUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceTypeUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Describe

	if len(errors) > 0 {
		return DeviceTypeUpdateReqMultiError(errors)
	}

	return nil
}

// DeviceTypeUpdateReqMultiError is an error wrapping multiple validation
// errors returned by DeviceTypeUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type DeviceTypeUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceTypeUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceTypeUpdateReqMultiError) AllErrors() []error { return m }

// DeviceTypeUpdateReqValidationError is the validation error returned by
// DeviceTypeUpdateReq.Validate if the designated constraints aren't met.
type DeviceTypeUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceTypeUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceTypeUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceTypeUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceTypeUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceTypeUpdateReqValidationError) ErrorName() string {
	return "DeviceTypeUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceTypeUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceTypeUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceTypeUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceTypeUpdateReqValidationError{}

// Validate checks the field values on DeviceTypeDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceTypeDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceTypeDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceTypeDeleteReqMultiError, or nil if none found.
func (m *DeviceTypeDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceTypeDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceTypeDeleteReqMultiError(errors)
	}

	return nil
}

// DeviceTypeDeleteReqMultiError is an error wrapping multiple validation
// errors returned by DeviceTypeDeleteReq.ValidateAll() if the designated
// constraints aren't met.
type DeviceTypeDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceTypeDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceTypeDeleteReqMultiError) AllErrors() []error { return m }

// DeviceTypeDeleteReqValidationError is the validation error returned by
// DeviceTypeDeleteReq.Validate if the designated constraints aren't met.
type DeviceTypeDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceTypeDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceTypeDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceTypeDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceTypeDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceTypeDeleteReqValidationError) ErrorName() string {
	return "DeviceTypeDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceTypeDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceTypeDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceTypeDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceTypeDeleteReqValidationError{}

// Validate checks the field values on UserDeviceCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDeviceCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeviceCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeviceCreateReqMultiError, or nil if none found.
func (m *UserDeviceCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeviceCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for DeviceCode

	if len(errors) > 0 {
		return UserDeviceCreateReqMultiError(errors)
	}

	return nil
}

// UserDeviceCreateReqMultiError is an error wrapping multiple validation
// errors returned by UserDeviceCreateReq.ValidateAll() if the designated
// constraints aren't met.
type UserDeviceCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeviceCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeviceCreateReqMultiError) AllErrors() []error { return m }

// UserDeviceCreateReqValidationError is the validation error returned by
// UserDeviceCreateReq.Validate if the designated constraints aren't met.
type UserDeviceCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeviceCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeviceCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeviceCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeviceCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeviceCreateReqValidationError) ErrorName() string {
	return "UserDeviceCreateReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeviceCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeviceCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeviceCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeviceCreateReqValidationError{}

// Validate checks the field values on UserDeviceGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDeviceGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeviceGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeviceGetReqMultiError, or nil if none found.
func (m *UserDeviceGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeviceGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for DeviceName

	// no validation rules for DeviceCode

	// no validation rules for CurrPage

	// no validation rules for PageSize

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return UserDeviceGetReqMultiError(errors)
	}

	return nil
}

// UserDeviceGetReqMultiError is an error wrapping multiple validation errors
// returned by UserDeviceGetReq.ValidateAll() if the designated constraints
// aren't met.
type UserDeviceGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeviceGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeviceGetReqMultiError) AllErrors() []error { return m }

// UserDeviceGetReqValidationError is the validation error returned by
// UserDeviceGetReq.Validate if the designated constraints aren't met.
type UserDeviceGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeviceGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeviceGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeviceGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeviceGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeviceGetReqValidationError) ErrorName() string { return "UserDeviceGetReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDeviceGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeviceGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeviceGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeviceGetReqValidationError{}

// Validate checks the field values on UserDevice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDevice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDevice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDeviceMultiError, or
// nil if none found.
func (m *UserDevice) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDevice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserName

	// no validation rules for DeviceName

	// no validation rules for DeviceCode

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return UserDeviceMultiError(errors)
	}

	return nil
}

// UserDeviceMultiError is an error wrapping multiple validation errors
// returned by UserDevice.ValidateAll() if the designated constraints aren't met.
type UserDeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeviceMultiError) AllErrors() []error { return m }

// UserDeviceValidationError is the validation error returned by
// UserDevice.Validate if the designated constraints aren't met.
type UserDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeviceValidationError) ErrorName() string { return "UserDeviceValidationError" }

// Error satisfies the builtin error interface
func (e UserDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeviceValidationError{}

// Validate checks the field values on UserDeviceGetRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDeviceGetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeviceGetRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeviceGetResMultiError, or nil if none found.
func (m *UserDeviceGetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeviceGetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserDevice() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserDeviceGetResValidationError{
						field:  fmt.Sprintf("UserDevice[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserDeviceGetResValidationError{
						field:  fmt.Sprintf("UserDevice[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDeviceGetResValidationError{
					field:  fmt.Sprintf("UserDevice[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return UserDeviceGetResMultiError(errors)
	}

	return nil
}

// UserDeviceGetResMultiError is an error wrapping multiple validation errors
// returned by UserDeviceGetRes.ValidateAll() if the designated constraints
// aren't met.
type UserDeviceGetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeviceGetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeviceGetResMultiError) AllErrors() []error { return m }

// UserDeviceGetResValidationError is the validation error returned by
// UserDeviceGetRes.Validate if the designated constraints aren't met.
type UserDeviceGetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeviceGetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeviceGetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeviceGetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeviceGetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeviceGetResValidationError) ErrorName() string { return "UserDeviceGetResValidationError" }

// Error satisfies the builtin error interface
func (e UserDeviceGetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeviceGetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeviceGetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeviceGetResValidationError{}

// Validate checks the field values on UserDeviceDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDeviceDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeviceDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeviceDeleteReqMultiError, or nil if none found.
func (m *UserDeviceDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeviceDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserDeviceDeleteReqMultiError(errors)
	}

	return nil
}

// UserDeviceDeleteReqMultiError is an error wrapping multiple validation
// errors returned by UserDeviceDeleteReq.ValidateAll() if the designated
// constraints aren't met.
type UserDeviceDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeviceDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeviceDeleteReqMultiError) AllErrors() []error { return m }

// UserDeviceDeleteReqValidationError is the validation error returned by
// UserDeviceDeleteReq.Validate if the designated constraints aren't met.
type UserDeviceDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeviceDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeviceDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeviceDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeviceDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeviceDeleteReqValidationError) ErrorName() string {
	return "UserDeviceDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeviceDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeviceDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeviceDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeviceDeleteReqValidationError{}
