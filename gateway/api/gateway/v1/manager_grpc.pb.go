// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.0
// source: api/gateway/v1/manager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	// 用户注册
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 用户查询
	UserGet(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetRes, error)
	// 用户修改
	UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 密码重置
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 用户注销
	UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 角色创建
	RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 角色查询
	RoleGet(ctx context.Context, in *RoleGetReq, opts ...grpc.CallOption) (*RoleGetRes, error)
	// 角色修改
	RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 角色删除
	RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 接口创建
	ApiCreate(ctx context.Context, in *ApiCreateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 接口查询
	ApiGet(ctx context.Context, in *ApiGetReq, opts ...grpc.CallOption) (*ApiGetRes, error)
	// 接口修改
	ApiUpdate(ctx context.Context, in *ApiUpdateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 接口删除
	ApiDelete(ctx context.Context, in *ApiDeleteReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 用户设备信息创建
	UserDeviceCreate(ctx context.Context, in *UserDeviceCreateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 用户设备信息查询
	UserDeviceGet(ctx context.Context, in *UserDeviceGetReq, opts ...grpc.CallOption) (*UserDeviceGetRes, error)
	// 用户设备信息删除
	UserDeviceDelete(ctx context.Context, in *UserDeviceDeleteReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备创建
	DeviceCreate(ctx context.Context, in *DeviceCreateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备查询
	DeviceGet(ctx context.Context, in *DeviceGetReq, opts ...grpc.CallOption) (*DeviceGetRes, error)
	// 设备修改
	DeviceUpdate(ctx context.Context, in *DeviceUpdateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备删除
	DeviceDelete(ctx context.Context, in *DeviceDeleteReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备数据接收
	DeviceDataReceive(ctx context.Context, in *DeviceDataReceiveReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备类型创建
	DeviceTypeCreate(ctx context.Context, in *DeviceTypeCreateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备类型查询
	DeviceTypeGet(ctx context.Context, in *DeviceTypeGetReq, opts ...grpc.CallOption) (*DeviceTypeGetRes, error)
	// 设备类型修改
	DeviceTypeUpdate(ctx context.Context, in *DeviceTypeUpdateReq, opts ...grpc.CallOption) (*OperationRes, error)
	// 设备类型删除
	DeviceTypeDelete(ctx context.Context, in *DeviceTypeDeleteReq, opts ...grpc.CallOption) (*OperationRes, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserGet(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetRes, error) {
	out := new(UserGetRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/RoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RoleGet(ctx context.Context, in *RoleGetReq, opts ...grpc.CallOption) (*RoleGetRes, error) {
	out := new(RoleGetRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/RoleGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/RoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/RoleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ApiCreate(ctx context.Context, in *ApiCreateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/ApiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ApiGet(ctx context.Context, in *ApiGetReq, opts ...grpc.CallOption) (*ApiGetRes, error) {
	out := new(ApiGetRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/ApiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ApiUpdate(ctx context.Context, in *ApiUpdateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/ApiUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ApiDelete(ctx context.Context, in *ApiDeleteReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/ApiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserDeviceCreate(ctx context.Context, in *UserDeviceCreateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserDeviceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserDeviceGet(ctx context.Context, in *UserDeviceGetReq, opts ...grpc.CallOption) (*UserDeviceGetRes, error) {
	out := new(UserDeviceGetRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserDeviceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UserDeviceDelete(ctx context.Context, in *UserDeviceDeleteReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/UserDeviceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceCreate(ctx context.Context, in *DeviceCreateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceGet(ctx context.Context, in *DeviceGetReq, opts ...grpc.CallOption) (*DeviceGetRes, error) {
	out := new(DeviceGetRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceUpdate(ctx context.Context, in *DeviceUpdateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceDelete(ctx context.Context, in *DeviceDeleteReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceDataReceive(ctx context.Context, in *DeviceDataReceiveReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceDataReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceTypeCreate(ctx context.Context, in *DeviceTypeCreateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceTypeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceTypeGet(ctx context.Context, in *DeviceTypeGetReq, opts ...grpc.CallOption) (*DeviceTypeGetRes, error) {
	out := new(DeviceTypeGetRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceTypeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceTypeUpdate(ctx context.Context, in *DeviceTypeUpdateReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceTypeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeviceTypeDelete(ctx context.Context, in *DeviceTypeDeleteReq, opts ...grpc.CallOption) (*OperationRes, error) {
	out := new(OperationRes)
	err := c.cc.Invoke(ctx, "/api.gateway.v1.Manager/DeviceTypeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginRes, error)
	// 用户注册
	UserRegister(context.Context, *UserRegisterReq) (*OperationRes, error)
	// 用户查询
	UserGet(context.Context, *UserGetReq) (*UserGetRes, error)
	// 用户修改
	UserUpdate(context.Context, *UserUpdateReq) (*OperationRes, error)
	// 密码重置
	ResetPassword(context.Context, *ResetPasswordReq) (*OperationRes, error)
	// 用户注销
	UserDelete(context.Context, *UserDeleteReq) (*OperationRes, error)
	// 角色创建
	RoleCreate(context.Context, *RoleCreateReq) (*OperationRes, error)
	// 角色查询
	RoleGet(context.Context, *RoleGetReq) (*RoleGetRes, error)
	// 角色修改
	RoleUpdate(context.Context, *RoleUpdateReq) (*OperationRes, error)
	// 角色删除
	RoleDelete(context.Context, *RoleDeleteReq) (*OperationRes, error)
	// 接口创建
	ApiCreate(context.Context, *ApiCreateReq) (*OperationRes, error)
	// 接口查询
	ApiGet(context.Context, *ApiGetReq) (*ApiGetRes, error)
	// 接口修改
	ApiUpdate(context.Context, *ApiUpdateReq) (*OperationRes, error)
	// 接口删除
	ApiDelete(context.Context, *ApiDeleteReq) (*OperationRes, error)
	// 用户设备信息创建
	UserDeviceCreate(context.Context, *UserDeviceCreateReq) (*OperationRes, error)
	// 用户设备信息查询
	UserDeviceGet(context.Context, *UserDeviceGetReq) (*UserDeviceGetRes, error)
	// 用户设备信息删除
	UserDeviceDelete(context.Context, *UserDeviceDeleteReq) (*OperationRes, error)
	// 设备创建
	DeviceCreate(context.Context, *DeviceCreateReq) (*OperationRes, error)
	// 设备查询
	DeviceGet(context.Context, *DeviceGetReq) (*DeviceGetRes, error)
	// 设备修改
	DeviceUpdate(context.Context, *DeviceUpdateReq) (*OperationRes, error)
	// 设备删除
	DeviceDelete(context.Context, *DeviceDeleteReq) (*OperationRes, error)
	// 设备数据接收
	DeviceDataReceive(context.Context, *DeviceDataReceiveReq) (*OperationRes, error)
	// 设备类型创建
	DeviceTypeCreate(context.Context, *DeviceTypeCreateReq) (*OperationRes, error)
	// 设备类型查询
	DeviceTypeGet(context.Context, *DeviceTypeGetReq) (*DeviceTypeGetRes, error)
	// 设备类型修改
	DeviceTypeUpdate(context.Context, *DeviceTypeUpdateReq) (*OperationRes, error)
	// 设备类型删除
	DeviceTypeDelete(context.Context, *DeviceTypeDeleteReq) (*OperationRes, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedManagerServer) UserRegister(context.Context, *UserRegisterReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedManagerServer) UserGet(context.Context, *UserGetReq) (*UserGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedManagerServer) UserUpdate(context.Context, *UserUpdateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedManagerServer) ResetPassword(context.Context, *ResetPasswordReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedManagerServer) UserDelete(context.Context, *UserDeleteReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedManagerServer) RoleCreate(context.Context, *RoleCreateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleCreate not implemented")
}
func (UnimplementedManagerServer) RoleGet(context.Context, *RoleGetReq) (*RoleGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGet not implemented")
}
func (UnimplementedManagerServer) RoleUpdate(context.Context, *RoleUpdateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedManagerServer) RoleDelete(context.Context, *RoleDeleteReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (UnimplementedManagerServer) ApiCreate(context.Context, *ApiCreateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiCreate not implemented")
}
func (UnimplementedManagerServer) ApiGet(context.Context, *ApiGetReq) (*ApiGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiGet not implemented")
}
func (UnimplementedManagerServer) ApiUpdate(context.Context, *ApiUpdateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiUpdate not implemented")
}
func (UnimplementedManagerServer) ApiDelete(context.Context, *ApiDeleteReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiDelete not implemented")
}
func (UnimplementedManagerServer) UserDeviceCreate(context.Context, *UserDeviceCreateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCreate not implemented")
}
func (UnimplementedManagerServer) UserDeviceGet(context.Context, *UserDeviceGetReq) (*UserDeviceGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceGet not implemented")
}
func (UnimplementedManagerServer) UserDeviceDelete(context.Context, *UserDeviceDeleteReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceDelete not implemented")
}
func (UnimplementedManagerServer) DeviceCreate(context.Context, *DeviceCreateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceCreate not implemented")
}
func (UnimplementedManagerServer) DeviceGet(context.Context, *DeviceGetReq) (*DeviceGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGet not implemented")
}
func (UnimplementedManagerServer) DeviceUpdate(context.Context, *DeviceUpdateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceUpdate not implemented")
}
func (UnimplementedManagerServer) DeviceDelete(context.Context, *DeviceDeleteReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceDelete not implemented")
}
func (UnimplementedManagerServer) DeviceDataReceive(context.Context, *DeviceDataReceiveReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceDataReceive not implemented")
}
func (UnimplementedManagerServer) DeviceTypeCreate(context.Context, *DeviceTypeCreateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeCreate not implemented")
}
func (UnimplementedManagerServer) DeviceTypeGet(context.Context, *DeviceTypeGetReq) (*DeviceTypeGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeGet not implemented")
}
func (UnimplementedManagerServer) DeviceTypeUpdate(context.Context, *DeviceTypeUpdateReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeUpdate not implemented")
}
func (UnimplementedManagerServer) DeviceTypeDelete(context.Context, *DeviceTypeDeleteReq) (*OperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeDelete not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserGet(ctx, req.(*UserGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserUpdate(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserDelete(ctx, req.(*UserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/RoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RoleCreate(ctx, req.(*RoleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RoleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RoleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/RoleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RoleGet(ctx, req.(*RoleGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/RoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/RoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RoleDelete(ctx, req.(*RoleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ApiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ApiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/ApiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ApiCreate(ctx, req.(*ApiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ApiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ApiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/ApiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ApiGet(ctx, req.(*ApiGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ApiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ApiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/ApiUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ApiUpdate(ctx, req.(*ApiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ApiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ApiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/ApiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ApiDelete(ctx, req.(*ApiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserDeviceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserDeviceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserDeviceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserDeviceCreate(ctx, req.(*UserDeviceCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserDeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserDeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserDeviceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserDeviceGet(ctx, req.(*UserDeviceGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UserDeviceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UserDeviceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/UserDeviceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UserDeviceDelete(ctx, req.(*UserDeviceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceCreate(ctx, req.(*DeviceCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceGet(ctx, req.(*DeviceGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceUpdate(ctx, req.(*DeviceUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceDelete(ctx, req.(*DeviceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceDataReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceDataReceiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceDataReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceDataReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceDataReceive(ctx, req.(*DeviceDataReceiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceTypeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceTypeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceTypeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceTypeCreate(ctx, req.(*DeviceTypeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceTypeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceTypeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceTypeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceTypeGet(ctx, req.(*DeviceTypeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceTypeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceTypeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceTypeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceTypeUpdate(ctx, req.(*DeviceTypeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeviceTypeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeviceTypeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.v1.Manager/DeviceTypeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeviceTypeDelete(ctx, req.(*DeviceTypeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Manager_Login_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _Manager_UserRegister_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _Manager_UserGet_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Manager_UserUpdate_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Manager_ResetPassword_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _Manager_UserDelete_Handler,
		},
		{
			MethodName: "RoleCreate",
			Handler:    _Manager_RoleCreate_Handler,
		},
		{
			MethodName: "RoleGet",
			Handler:    _Manager_RoleGet_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _Manager_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _Manager_RoleDelete_Handler,
		},
		{
			MethodName: "ApiCreate",
			Handler:    _Manager_ApiCreate_Handler,
		},
		{
			MethodName: "ApiGet",
			Handler:    _Manager_ApiGet_Handler,
		},
		{
			MethodName: "ApiUpdate",
			Handler:    _Manager_ApiUpdate_Handler,
		},
		{
			MethodName: "ApiDelete",
			Handler:    _Manager_ApiDelete_Handler,
		},
		{
			MethodName: "UserDeviceCreate",
			Handler:    _Manager_UserDeviceCreate_Handler,
		},
		{
			MethodName: "UserDeviceGet",
			Handler:    _Manager_UserDeviceGet_Handler,
		},
		{
			MethodName: "UserDeviceDelete",
			Handler:    _Manager_UserDeviceDelete_Handler,
		},
		{
			MethodName: "DeviceCreate",
			Handler:    _Manager_DeviceCreate_Handler,
		},
		{
			MethodName: "DeviceGet",
			Handler:    _Manager_DeviceGet_Handler,
		},
		{
			MethodName: "DeviceUpdate",
			Handler:    _Manager_DeviceUpdate_Handler,
		},
		{
			MethodName: "DeviceDelete",
			Handler:    _Manager_DeviceDelete_Handler,
		},
		{
			MethodName: "DeviceDataReceive",
			Handler:    _Manager_DeviceDataReceive_Handler,
		},
		{
			MethodName: "DeviceTypeCreate",
			Handler:    _Manager_DeviceTypeCreate_Handler,
		},
		{
			MethodName: "DeviceTypeGet",
			Handler:    _Manager_DeviceTypeGet_Handler,
		},
		{
			MethodName: "DeviceTypeUpdate",
			Handler:    _Manager_DeviceTypeUpdate_Handler,
		},
		{
			MethodName: "DeviceTypeDelete",
			Handler:    _Manager_DeviceTypeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/v1/manager.proto",
}
