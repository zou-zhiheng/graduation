// Code generated by https://github.com/zhufuyi/sponge, DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	errcode "github.com/zhufuyi/sponge/pkg/errcode"
	middleware "github.com/zhufuyi/sponge/pkg/gin/middleware"
	zap "go.uber.org/zap"
	strings "strings"
)

// import packages: strings. context. errcode. middleware. zap. gin.

type ManagerLogicer interface {
	Login(ctx context.Context, req *LoginReq) (*LoginRes, error)
	UserRegister(ctx context.Context, req *UserRegisterReq) (*OperationRes, error)
	UserGet(ctx context.Context, req *UserGetReq) (*UserGetRes, error)
	UserUpdate(ctx context.Context, req *UserUpdateReq) (*OperationRes, error)
	ResetPassword(ctx context.Context, req *ResetPasswordReq) (*OperationRes, error)
	UserDelete(ctx context.Context, req *UserDeleteReq) (*OperationRes, error)
	RoleCreate(ctx context.Context, req *RoleCreateReq) (*OperationRes, error)
	RoleGet(ctx context.Context, req *RoleGetReq) (*RoleGetRes, error)
	RoleUpdate(ctx context.Context, req *RoleUpdateReq) (*OperationRes, error)
	RoleDelete(ctx context.Context, req *RoleDeleteReq) (*OperationRes, error)
	ApiCreate(ctx context.Context, req *ApiCreateReq) (*OperationRes, error)
	ApiGet(ctx context.Context, req *ApiGetReq) (*ApiGetRes, error)
	ApiUpdate(ctx context.Context, req *ApiUpdateReq) (*OperationRes, error)
	ApiDelete(ctx context.Context, req *ApiDeleteReq) (*OperationRes, error)
	UserDeviceCreate(ctx context.Context, req *UserDeviceCreateReq) (*OperationRes, error)
	UserDeviceGet(ctx context.Context, req *UserDeviceGetReq) (*UserDeviceGetRes, error)
	UserDeviceDelete(ctx context.Context, req *UserDeviceDeleteReq) (*OperationRes, error)
	DeviceCreate(ctx context.Context, req *DeviceCreateReq) (*OperationRes, error)
	DeviceGet(ctx context.Context, req *DeviceGetReq) (*DeviceGetRes, error)
	DeviceUpdate(ctx context.Context, req *DeviceUpdateReq) (*OperationRes, error)
	DeviceDelete(ctx context.Context, req *DeviceDeleteReq) (*OperationRes, error)
	DeviceDataReceive(ctx context.Context, req *DeviceDataReceiveReq) (*OperationRes, error)
	DeviceTypeCreate(ctx context.Context, req *DeviceTypeCreateReq) (*OperationRes, error)
	DeviceTypeGet(ctx context.Context, req *DeviceTypeGetReq) (*DeviceTypeGetRes, error)
	DeviceTypeUpdate(ctx context.Context, req *DeviceTypeUpdateReq) (*OperationRes, error)
	DeviceTypeDelete(ctx context.Context, req *DeviceTypeDeleteReq) (*OperationRes, error)
}

type ManagerOption func(*managerOptions)

type managerOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *managerOptions) apply(opts ...ManagerOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithManagerHTTPResponse() ManagerOption {
	return func(o *managerOptions) {
		o.isFromRPC = false
	}
}

func WithManagerRPCResponse() ManagerOption {
	return func(o *managerOptions) {
		o.isFromRPC = true
	}
}

func WithManagerResponser(responser errcode.Responser) ManagerOption {
	return func(o *managerOptions) {
		o.responser = responser
	}
}

func WithManagerLogger(zapLog *zap.Logger) ManagerOption {
	return func(o *managerOptions) {
		o.zapLog = zapLog
	}
}

func WithManagerErrorToHTTPCode(e ...*errcode.Error) ManagerOption {
	return func(o *managerOptions) {
		o.httpErrors = e
	}
}

func WithManagerRPCStatusToHTTPCode(s ...*errcode.RPCStatus) ManagerOption {
	return func(o *managerOptions) {
		o.rpcStatus = s
	}
}

func WithManagerWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) ManagerOption {
	return func(o *managerOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterManagerRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic ManagerLogicer,
	opts ...ManagerOption) {

	o := &managerOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &managerRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type managerRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                ManagerLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *managerRouter) register() {
	r.iRouter.Handle("POST", "/api/v1/login", r.withMiddleware("POST", "/api/v1/login", r.Login_0)...)
	r.iRouter.Handle("POST", "/api/v1/user/register", r.withMiddleware("POST", "/api/v1/user/register", r.UserRegister_0)...)
	r.iRouter.Handle("POST", "/api/v1/user/get", r.withMiddleware("POST", "/api/v1/user/get", r.UserGet_0)...)
	r.iRouter.Handle("POST", "/api/v1/user/update", r.withMiddleware("POST", "/api/v1/user/update", r.UserUpdate_0)...)
	r.iRouter.Handle("POST", "/api/v1/user/resetPassword", r.withMiddleware("POST", "/api/v1/user/resetPassword", r.ResetPassword_0)...)
	r.iRouter.Handle("POST", "/api/v1/user/delete", r.withMiddleware("POST", "/api/v1/user/delete", r.UserDelete_0)...)
	r.iRouter.Handle("POST", "/api/v1/role/create", r.withMiddleware("POST", "/api/v1/role/create", r.RoleCreate_0)...)
	r.iRouter.Handle("POST", "/api/v1/role/get", r.withMiddleware("POST", "/api/v1/role/get", r.RoleGet_0)...)
	r.iRouter.Handle("POST", "/api/v1/role/update", r.withMiddleware("POST", "/api/v1/role/update", r.RoleUpdate_0)...)
	r.iRouter.Handle("POST", "/api/v1/role/delete", r.withMiddleware("POST", "/api/v1/role/delete", r.RoleDelete_0)...)
	r.iRouter.Handle("POST", "/api/v1/api/create", r.withMiddleware("POST", "/api/v1/api/create", r.ApiCreate_0)...)
	r.iRouter.Handle("POST", "/api/v1/api/get", r.withMiddleware("POST", "/api/v1/api/get", r.ApiGet_0)...)
	r.iRouter.Handle("POST", "/api/v1/api/update", r.withMiddleware("POST", "/api/v1/api/update", r.ApiUpdate_0)...)
	r.iRouter.Handle("POST", "/api/v1/api/delete", r.withMiddleware("POST", "/api/v1/api/delete", r.ApiDelete_0)...)
	r.iRouter.Handle("POST", "/api/v1/userDevice/create", r.withMiddleware("POST", "/api/v1/userDevice/create", r.UserDeviceCreate_0)...)
	r.iRouter.Handle("POST", "/api/v1/userDevice/get", r.withMiddleware("POST", "/api/v1/userDevice/get", r.UserDeviceGet_0)...)
	r.iRouter.Handle("POST", "/api/v1/userDevice/delete", r.withMiddleware("POST", "/api/v1/userDevice/delete", r.UserDeviceDelete_0)...)
	r.iRouter.Handle("POST", "/api/v1/device/create", r.withMiddleware("POST", "/api/v1/device/create", r.DeviceCreate_0)...)
	r.iRouter.Handle("POST", "/api/v1/device/get", r.withMiddleware("POST", "/api/v1/device/get", r.DeviceGet_0)...)
	r.iRouter.Handle("POST", "/api/v1/device/update", r.withMiddleware("POST", "/api/v1/device/update", r.DeviceUpdate_0)...)
	r.iRouter.Handle("POST", "/api/v1/device/delete", r.withMiddleware("POST", "/api/v1/device/delete", r.DeviceDelete_0)...)
	r.iRouter.Handle("POST", "/api/v1/device/dateReceive", r.withMiddleware("POST", "/api/v1/device/dateReceive", r.DeviceDataReceive_0)...)
	r.iRouter.Handle("POST", "/api/v1/deviceType/create", r.withMiddleware("POST", "/api/v1/deviceType/create", r.DeviceTypeCreate_0)...)
	r.iRouter.Handle("POST", "/api/v1/deviceType/get", r.withMiddleware("POST", "/api/v1/deviceType/get", r.DeviceTypeGet_0)...)
	r.iRouter.Handle("POST", "/api/v1/deviceType/update", r.withMiddleware("POST", "/api/v1/deviceType/update", r.DeviceTypeUpdate_0)...)
	r.iRouter.Handle("POST", "/api/v1/deviceType/delete", r.withMiddleware("POST", "/api/v1/deviceType/delete", r.DeviceTypeDelete_0)...)

}

func (r *managerRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

var _ middleware.CtxKeyString

func (r *managerRouter) Login_0(c *gin.Context) {
	req := &LoginReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.Login(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserRegister_0(c *gin.Context) {
	req := &UserRegisterReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserRegister(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserGet_0(c *gin.Context) {
	req := &UserGetReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserGet(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserUpdate_0(c *gin.Context) {
	req := &UserUpdateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserUpdate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) ResetPassword_0(c *gin.Context) {
	req := &ResetPasswordReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ResetPassword(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserDelete_0(c *gin.Context) {
	req := &UserDeleteReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserDelete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) RoleCreate_0(c *gin.Context) {
	req := &RoleCreateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.RoleCreate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) RoleGet_0(c *gin.Context) {
	req := &RoleGetReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.RoleGet(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) RoleUpdate_0(c *gin.Context) {
	req := &RoleUpdateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.RoleUpdate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) RoleDelete_0(c *gin.Context) {
	req := &RoleDeleteReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.RoleDelete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) ApiCreate_0(c *gin.Context) {
	req := &ApiCreateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ApiCreate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) ApiGet_0(c *gin.Context) {
	req := &ApiGetReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ApiGet(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) ApiUpdate_0(c *gin.Context) {
	req := &ApiUpdateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ApiUpdate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) ApiDelete_0(c *gin.Context) {
	req := &ApiDeleteReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ApiDelete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserDeviceCreate_0(c *gin.Context) {
	req := &UserDeviceCreateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserDeviceCreate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserDeviceGet_0(c *gin.Context) {
	req := &UserDeviceGetReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserDeviceGet(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) UserDeviceDelete_0(c *gin.Context) {
	req := &UserDeviceDeleteReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UserDeviceDelete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceCreate_0(c *gin.Context) {
	req := &DeviceCreateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceCreate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceGet_0(c *gin.Context) {
	req := &DeviceGetReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceGet(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceUpdate_0(c *gin.Context) {
	req := &DeviceUpdateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceUpdate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceDelete_0(c *gin.Context) {
	req := &DeviceDeleteReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceDelete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceDataReceive_0(c *gin.Context) {
	req := &DeviceDataReceiveReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceDataReceive(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceTypeCreate_0(c *gin.Context) {
	req := &DeviceTypeCreateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceTypeCreate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceTypeGet_0(c *gin.Context) {
	req := &DeviceTypeGetReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceTypeGet(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceTypeUpdate_0(c *gin.Context) {
	req := &DeviceTypeUpdateReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceTypeUpdate(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *managerRouter) DeviceTypeDelete_0(c *gin.Context) {
	req := &DeviceTypeDeleteReq{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeviceTypeDelete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}
