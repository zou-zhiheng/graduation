// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"gateway/api/common"
	dataVisualizationV1 "gateway/api/dataVisualization/v1"
	gatewayV1 "gateway/api/gateway/v1"
	"gateway/internal/ecode"
	"gateway/internal/rpcclient"
	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
	//"gateway/internal/rpcclient"
)

var _ gatewayV1.DataVisualizationLogicer = (*dataVisualizationClient)(nil)

type dataVisualizationClient struct {
	// define rpc clients interface here
	// example:
	dataVisualizationCli dataVisualizationV1.DataVisualizationClient
}

// NewDataVisualizationClient create a client
func NewDataVisualizationClient() gatewayV1.DataVisualizationLogicer {
	return &dataVisualizationClient{
		// example:
		dataVisualizationCli: dataVisualizationV1.NewDataVisualizationClient(rpcclient.GetDataVisualizationRPCConn()),
	}
}

// DeviceDataGet ......
func (c *dataVisualizationClient) DeviceDataGet(ctx context.Context, req *gatewayV1.DeviceDataGetReq) (*gatewayV1.DeviceDataGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	//user := ctx.Value("user").(model.User)

	reply, err := c.dataVisualizationCli.DeviceDataGet(ctx, &dataVisualizationV1.DeviceDataGetReq{
		Name:      req.Name,
		Code:      req.Code,
		PageSize:  req.PageSize,
		StartTime: req.StartTime,
		EndTime:   req.EndTime,
		CurrPage:  req.CurrPage,
		UserId:    req.UserId,
	})
	if err != nil {
		logger.Warn("DeviceDataGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var data []*common.DeviceData
	for _, d := range reply.Data {
		deviceData := &common.DeviceData{CreateTime: d.CreateTime}
		for _, detail := range d.Data {
			deviceData.Data = append(deviceData.Data, &common.DataDetail{
				Key:   detail.Key,
				Value: detail.Value,
				Unit:  detail.Unit,
			})
		}
		data = append(data, deviceData)
	}

	return &gatewayV1.DeviceDataGetRes{
		Name:  reply.Name,
		Code:  reply.Code,
		Data:  data,
		Count: reply.Count,
	}, nil

}

// DeviceDataPush 设备数据推送
func (c *dataVisualizationClient) DeviceDataPush(ctx context.Context, req *gatewayV1.DeviceDataPushReq) (*gatewayV1.DeviceDataPushRes, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
	//		    return nil, ecode.StatusInvalidParams.Err()
	//	    }
	//
	//     reply, err := c.dataVisualizationCli.DeviceDataPush(ctx, &dataVisualizationV1.DeviceDataPushReq{
	//     	Code: req.Code,
	//     })
	//     if err != nil {
	//     	logger.Warn("DeviceDataPush error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
	//     	return nil, err
	//     }
	//
	//     return &gatewayV1.DeviceDataPushRes{
	//     	Name: reply.Name,
	//     	Code: reply.Code,
	//     	Data: reply.Data,
	//     }, nil
}

// DeviceDataCurve ......
func (c *dataVisualizationClient) DeviceDataCurve(ctx context.Context, req *gatewayV1.DeviceDataCurveReq) (*gatewayV1.DeviceDataCurveRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	var chartType []dataVisualizationV1.ChartType
	for _, val := range req.ChartType {
		chartType = append(chartType, dataVisualizationV1.ChartType(int(val.Number())))
	}
	reply, err := c.dataVisualizationCli.DeviceDataCurve(ctx, &dataVisualizationV1.DeviceDataCurveReq{
		UserId:     req.UserId,
		DeviceCode: req.DeviceCode,
		Interval:   dataVisualizationV1.IntervalType(int(req.Interval.Number())),
		ChartType:  chartType,
	})
	if err != nil {
		logger.Warn("DeviceDataCurve error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.DeviceDataCurveRes{
		//Month: reply.Month,
		//Pip:   reply.Pip,
		Pip:   c.convertChartData(reply.Pip),
		Line:  c.convertChartData(reply.Line),
		Elect: c.convertChartData(reply.Elect),
		Volt:  c.convertChartData(reply.Volt),
	}, nil
}

func (c *dataVisualizationClient) convertChartData(dataInfo *dataVisualizationV1.DataLine) (res *gatewayV1.DataLine) {

	if dataInfo != nil {
		res = &gatewayV1.DataLine{}
		for i := range dataInfo.Key {
			res.Key = append(res.Key, dataInfo.Key[i])
			res.Value = append(res.Value, dataInfo.Value[i])
		}
	}

	return
}
