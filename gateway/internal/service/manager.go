// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	managerV1 "gateway/api/manager/v1"
	"gateway/internal/ecode"
	"gateway/internal/rpcclient"
	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	gatewayV1 "gateway/api/gateway/v1"
	//"gateway/internal/rpcclient"
)

var _ gatewayV1.ManagerLogicer = (*managerClient)(nil)

type managerClient struct {
	// define rpc clients interface here
	// example:
	managerCli managerV1.ManagerClient
}

// NewManagerClient create a client
func NewManagerClient() gatewayV1.ManagerLogicer {
	return &managerClient{
		// example:
		managerCli: managerV1.NewManagerClient(rpcclient.GetManagerRPCConn()),
	}
}

// Login 登录
func (c *managerClient) Login(ctx context.Context, req *gatewayV1.LoginReq) (*gatewayV1.LoginRes, error) {
	//panic("implement me")

	// fill in the business logic code here
	// example:
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.Login(ctx, &managerV1.LoginReq{
		Account:  req.Account,
		Password: req.Password,
	})
	if err != nil {
		logger.Warn("Login error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.LoginRes{
		Token: reply.Token,
		User: &gatewayV1.User{
			Id:        reply.User.Id,
			Name:      reply.User.Name,
			Account:   reply.User.Account,
			AvatarUrl: reply.User.AvatarUrl,
			Sex:       reply.User.Sex,
			Phone:     reply.User.Phone,
			RoleId:    reply.User.RoleId,
		},
	}, nil
}

// UserRegister 用户注册
func (c *managerClient) UserRegister(ctx context.Context, req *gatewayV1.UserRegisterReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserRegister(ctx, &managerV1.UserRegisterReq{
		Id:        req.Id,
		Name:      req.Name,
		Account:   req.Account,
		AvatarUrl: req.AvatarUrl,
		IsValid:   req.IsValid,
		Sex:       req.Sex,
		Phone:     req.Phone,
		RoleIds:   req.RoleIds,
		Password:  req.Password,
	})
	if err != nil {
		logger.Warn("UserRegister error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// UserGet 用户查询
func (c *managerClient) UserGet(ctx context.Context, req *gatewayV1.UserGetReq) (*gatewayV1.UserGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserGet(ctx, &managerV1.UserGetReq{
		Id:        req.Id,
		Name:      req.Name,
		Phone:     req.Phone,
		CurrPage:  req.CurrPage,
		PageSize:  req.PageSize,
		StartTime: req.StartTime,
		EndTime:   req.EndTime,
	})
	if err != nil {
		logger.Warn("UserGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var res []*gatewayV1.User
	var count uint64
	if reply != nil {
		count = reply.Count
		for _, rep := range reply.User {
			res = append(res, &gatewayV1.User{
				Id:        rep.Id,
				Name:      rep.Name,
				Account:   rep.Account,
				AvatarUrl: rep.AvatarUrl,
				IsValid:   rep.IsValid,
				Sex:       rep.Sex,
				Phone:     rep.Phone,
				RoleId:    rep.RoleId,
			})
		}
	}

	return &gatewayV1.UserGetRes{
		User:  res,
		Count: count,
	}, nil
}

// UserUpdate 用户修改
func (c *managerClient) UserUpdate(ctx context.Context, req *gatewayV1.UserUpdateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserUpdate(ctx, &managerV1.UserUpdateReq{
		Id:        req.Id,
		Name:      req.Name,
		Account:   req.Account,
		AvatarUrl: req.AvatarUrl,
		IsValid:   req.IsValid,
		Sex:       req.Sex,
		Phone:     req.Phone,
		RoleId:    req.RoleId,
	})
	if err != nil {
		logger.Warn("UserUpdate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// ResetPassword 密码重置
func (c *managerClient) ResetPassword(ctx context.Context, req *gatewayV1.ResetPasswordReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.ResetPassword(ctx, &managerV1.ResetPasswordReq{
		Id:        req.Id,
		Name:      req.Name,
		Account:   req.Account,
		AvatarUrl: req.AvatarUrl,
		IsValid:   req.IsValid,
		Sex:       req.Sex,
		Phone:     req.Phone,
		RoleId:    req.RoleId,
		Password:  req.Password,
	})
	if err != nil {
		logger.Warn("ResetPassword error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// UserDelete 用户注销
func (c *managerClient) UserDelete(ctx context.Context, req *gatewayV1.UserDeleteReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserDelete(ctx, &managerV1.UserDeleteReq{
		Id:        req.Id,
		Name:      req.Name,
		Account:   req.Account,
		AvatarUrl: req.AvatarUrl,
		IsValid:   req.IsValid,
		Sex:       req.Sex,
		Phone:     req.Phone,
		RoleId:    req.RoleId,
		Password:  req.Password,
	})
	if err != nil {
		logger.Warn("UserDelete error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// RoleCreate 角色创建
func (c *managerClient) RoleCreate(ctx context.Context, req *gatewayV1.RoleCreateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.RoleCreate(ctx, &managerV1.RoleCreateReq{
		Id:   req.Id,
		Name: req.Name,
		Code: req.Code,
		Apis: req.Apis,
		Desc: req.Desc,
	})
	if err != nil {
		logger.Warn("RoleCreate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// RoleGet 角色查询
func (c *managerClient) RoleGet(ctx context.Context, req *gatewayV1.RoleGetReq) (*gatewayV1.RoleGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.RoleGet(ctx, &managerV1.RoleGetReq{
		Id:        req.Id,
		Code:      req.Code,
		Name:      req.Name,
		CurrPage:  req.CurrPage,
		PageSize:  req.PageSize,
		StartTime: req.StartTime,
		EndTime:   req.EndTime,
	})
	if err != nil {
		logger.Warn("RoleGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var res []*gatewayV1.Role
	var count uint64
	if reply != nil {
		count = reply.Count
		for _, role := range reply.Role {
			res = append(res, &gatewayV1.Role{
				Id:   role.Id,
				Name: role.Name,
				Code: role.Code,
				Apis: role.Apis,
				Desc: role.Desc,
			})
		}
	}

	return &gatewayV1.RoleGetRes{
		Role:  res,
		Count: count,
	}, nil
}

// RoleUpdate 角色修改
func (c *managerClient) RoleUpdate(ctx context.Context, req *gatewayV1.RoleUpdateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.RoleUpdate(ctx, &managerV1.RoleUpdateReq{
		Id:   req.Id,
		Name: req.Name,
		Code: req.Code,
		Apis: req.Apis,
		Desc: req.Desc,
	})
	if err != nil {
		logger.Warn("RoleUpdate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// RoleDelete 角色删除
func (c *managerClient) RoleDelete(ctx context.Context, req *gatewayV1.RoleDeleteReq) (*gatewayV1.OperationRes, error) {

	// fill in the business logic code here
	// example:
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.RoleDelete(ctx, &managerV1.RoleDeleteReq{
		Id:   req.Id,
		Name: req.Name,
		Code: req.Code,
		Apis: req.Apis,
		Desc: req.Desc,
	})
	if err != nil {
		logger.Warn("RoleDelete error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// ApiCreate 接口创建
func (c *managerClient) ApiCreate(ctx context.Context, req *gatewayV1.ApiCreateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.ApiCreate(ctx, &managerV1.ApiCreateReq{
		Id:     req.Id,
		Name:   req.Name,
		Url:    req.Url,
		Method: req.Method,
		Desc:   req.Desc,
	})
	if err != nil {
		logger.Warn("ApiCreate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// ApiGet 接口查询
func (c *managerClient) ApiGet(ctx context.Context, req *gatewayV1.ApiGetReq) (*gatewayV1.ApiGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.ApiGet(ctx, &managerV1.ApiGetReq{
		Id:        req.Id,
		Name:      req.Name,
		Url:       req.Url,
		Method:    req.Method,
		PageSize:  req.PageSize,
		StartTime: req.StartTime,
		EndTime:   req.EndTime,
		CurrPage:  req.CurrPage,
	})
	if err != nil {
		logger.Warn("ApiGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var res []*gatewayV1.Api
	var count uint64
	if reply != nil {
		count = reply.Count
		for _, api := range reply.Api {
			res = append(res, &gatewayV1.Api{
				Id:     api.Id,
				Name:   api.Name,
				Url:    api.Url,
				Method: api.Method,
				Desc:   api.Desc,
			})
		}
	}

	return &gatewayV1.ApiGetRes{
		Api:   res,
		Count: count,
	}, nil
}

// ApiUpdate 接口修改
func (c *managerClient) ApiUpdate(ctx context.Context, req *gatewayV1.ApiUpdateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.ApiUpdate(ctx, &managerV1.ApiUpdateReq{
		Id:     req.Id,
		Name:   req.Name,
		Url:    req.Url,
		Method: req.Method,
		Desc:   req.Desc,
	})
	if err != nil {
		logger.Warn("ApiUpdate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// ApiDelete 接口删除
func (c *managerClient) ApiDelete(ctx context.Context, req *gatewayV1.ApiDeleteReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.ApiDelete(ctx, &managerV1.ApiDeleteReq{
		Id: req.Id,
	})
	if err != nil {
		logger.Warn("ApiDelete error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// UserDeviceCreate 用户设备信息创建
func (c *managerClient) UserDeviceCreate(ctx context.Context, req *gatewayV1.UserDeviceCreateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserDeviceCreate(ctx, &managerV1.UserDeviceCreateReq{
		Account:    req.Account,
		DeviceCode: req.DeviceCode,
	})
	if err != nil {
		logger.Warn("UserDeviceCreate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// UserDeviceGet 用户设备信息查询
func (c *managerClient) UserDeviceGet(ctx context.Context, req *gatewayV1.UserDeviceGetReq) (*gatewayV1.UserDeviceGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserDeviceGet(ctx, &managerV1.UserDeviceGetReq{
		UserName:   req.UserName,
		DeviceName: req.DeviceName,
		DeviceCode: req.DeviceCode,
		CurrPage:   req.CurrPage,
		PageSize:   req.PageSize,
		StartTime:  req.StartTime,
		EndTime:    req.EndTime,
	})
	if err != nil {
		logger.Warn("UserDeviceGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var res []*gatewayV1.UserDevice
	for _, userDevice := range reply.UserDevice {
		res = append(res, &gatewayV1.UserDevice{
			Id:         userDevice.Id,
			UserName:   userDevice.UserName,
			DeviceName: userDevice.DeviceName,
			DeviceCode: userDevice.DeviceCode,
			CreateTime: userDevice.CreateTime,
		})
	}

	return &gatewayV1.UserDeviceGetRes{
		UserDevice: res,
		Count:      reply.Count,
	}, nil
}

// UserDeviceDelete 用户设备信息删除
func (c *managerClient) UserDeviceDelete(ctx context.Context, req *gatewayV1.UserDeviceDeleteReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.UserDeviceDelete(ctx, &managerV1.UserDeviceDeleteReq{
		Id: req.Id,
	})
	if err != nil {
		logger.Warn("UserDeviceDelete error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceCreate 设备创建
func (c *managerClient) DeviceCreate(ctx context.Context, req *gatewayV1.DeviceCreateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceCreate(ctx, &managerV1.DeviceCreateReq{
		Name:         req.Name,
		Code:         req.Code,
		DeviceTypeId: req.DeviceTypeId,
		CheckTime:    req.CheckTime,
	})
	if err != nil {
		logger.Warn("DeviceCreate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceGet 设备查询
func (c *managerClient) DeviceGet(ctx context.Context, req *gatewayV1.DeviceGetReq) (*gatewayV1.DeviceGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceGet(ctx, &managerV1.DeviceGetReq{
		Name:           req.Name,
		Code:           req.Code,
		Protocol:       req.Protocol,
		DeviceTypeName: req.DeviceTypeName,
		State:          req.State,
		PageSize:       req.PageSize,
		StartTime:      req.StartTime,
		EndTime:        req.EndTime,
		CurrPage:       req.CurrPage,
		Id:             req.Id,
	})
	if err != nil {
		logger.Warn("DeviceGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var device []*gatewayV1.Device
	for _, dev := range reply.Device {
		device = append(device, &gatewayV1.Device{
			Id:             dev.Id,
			Name:           dev.Name,
			Code:           dev.Code,
			DeviceTypeId:   dev.DeviceTypeId,
			DeviceTypeName: dev.DeviceTypeName,
			State:          dev.State,
			CheckTime:      dev.CheckTime,
		})
	}

	return &gatewayV1.DeviceGetRes{
		Device: device,
		Count:  reply.Count,
	}, nil
}

// DeviceUpdate 设备修改
func (c *managerClient) DeviceUpdate(ctx context.Context, req *gatewayV1.DeviceUpdateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceUpdate(ctx, &managerV1.DeviceUpdateReq{
		Id:           req.Id,
		Name:         req.Name,
		Code:         req.Code,
		DeviceTypeId: req.DeviceTypeId,
		CheckTime:    req.CheckTime,
	})
	if err != nil {
		logger.Warn("DeviceUpdate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceDelete 设备删除
func (c *managerClient) DeviceDelete(ctx context.Context, req *gatewayV1.DeviceDeleteReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceDelete(ctx, &managerV1.DeviceDeleteReq{
		Id: req.Id,
	})
	if err != nil {
		logger.Warn("DeviceDelete error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceDataReceive 设备数据接收
func (c *managerClient) DeviceDataReceive(ctx context.Context, req *gatewayV1.DeviceDataReceiveReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	var reqDeviceData []*managerV1.DeviceData

	for _, data := range req.Data {
		var detail []*managerV1.DataDetail
		for _, det := range data.Data {
			detail = append(detail, &managerV1.DataDetail{
				Key:   det.Key,
				Value: det.Value,
				Unit:  det.Unit,
			})
		}

		reqDeviceData = append(reqDeviceData, &managerV1.DeviceData{
			Data:       detail,
			Code:       data.Code,
			CreateTime: data.CreateTime,
		})
	}

	reply, err := c.managerCli.DeviceDataReceive(ctx, &managerV1.DeviceDataReceiveReq{
		Data: reqDeviceData,
	})
	if err != nil {
		logger.Warn("DeviceDataReceive error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceTypeCreate 设备类型创建
func (c *managerClient) DeviceTypeCreate(ctx context.Context, req *gatewayV1.DeviceTypeCreateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceTypeCreate(ctx, &managerV1.DeviceTypeCreateReq{
		Name:     req.Name,
		Describe: req.Describe,
	})
	if err != nil {
		logger.Warn("DeviceTypeCreate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceTypeGet 设备类型查询
func (c *managerClient) DeviceTypeGet(ctx context.Context, req *gatewayV1.DeviceTypeGetReq) (*gatewayV1.DeviceTypeGetRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceTypeGet(ctx, &managerV1.DeviceTypeGetReq{
		Name:      req.Name,
		PageSize:  req.PageSize,
		StartTime: req.StartTime,
		EndTime:   req.EndTime,
		CurrPage:  req.CurrPage,
		Id:        req.Id,
	})
	if err != nil {
		logger.Warn("DeviceTypeGet error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	var deviceType []*gatewayV1.DeviceType

	for _, dev := range reply.DeviceType {
		deviceType = append(deviceType, &gatewayV1.DeviceType{
			Id:       dev.Id,
			Name:     dev.Name,
			Describe: dev.Describe,
		})
	}

	return &gatewayV1.DeviceTypeGetRes{
		DeviceType: deviceType,
		Count:      reply.Count,
	}, nil
}

// DeviceTypeUpdate 设备类型修改
func (c *managerClient) DeviceTypeUpdate(ctx context.Context, req *gatewayV1.DeviceTypeUpdateReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceTypeUpdate(ctx, &managerV1.DeviceTypeUpdateReq{
		Id:       req.Id,
		Name:     req.Name,
		Describe: req.Describe,
	})
	if err != nil {
		logger.Warn("DeviceTypeUpdate error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceTypeDelete 设备类型删除
func (c *managerClient) DeviceTypeDelete(ctx context.Context, req *gatewayV1.DeviceTypeDeleteReq) (*gatewayV1.OperationRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.managerCli.DeviceTypeDelete(ctx, &managerV1.DeviceTypeDeleteReq{
		Id: req.Id,
	})
	if err != nil {
		logger.Warn("DeviceTypeDelete error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &gatewayV1.OperationRes{
		Status: reply.Status,
		Msg:    reply.Msg,
	}, nil
}

// DeviceDataPush 设备数据推送
func (c *managerClient) DeviceDataPush(ctx context.Context, req *gatewayV1.DeviceDataPushReq) (*gatewayV1.DeviceDataPushRes, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	//从ctx中拿到

	//common.GetWsCoon(req.GetHttpRequest(), req.GetHttpRequest(), nil)
	//reply, err := c.managerCli.DeviceData(ctx, &managerV1.DeviceDataPushReq{
	//	Code:       req.Code,
	//	CreateTime: req.CreateTime,
	//})
	//if err != nil {
	//	logger.Warn("DeviceDataPush error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
	//	return nil, err
	//}

	return &gatewayV1.DeviceDataPushRes{
		//Data: reply.Data,
	}, nil
}
