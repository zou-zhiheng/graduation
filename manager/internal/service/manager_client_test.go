// Code generated by https://github.com/zhufuyi/sponge
// Test_service_manager_methods is used to test the manager api
// Test_service_manager_benchmark is used to performance test the manager api

package service

import (
	"context"
	"encoding/json"
	"fmt"
	"testing"
	"time"

	"github.com/zhufuyi/sponge/pkg/grpc/benchmark"

	managerV1 "manager/api/manager/v1"
	"manager/configs"
	"manager/internal/config"
)

// Test service manager api via grpc client
func Test_service_manager_methods(t *testing.T) {
	conn := getRPCClientConnForTest()
	cli := managerV1.NewManagerClient(conn)
	ctx, _ := context.WithTimeout(context.Background(), time.Second*30)

	tests := []struct {
		name    string
		fn      func() (interface{}, error)
		wantErr bool
	}{

		{
			name: "Login",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.LoginReq{
					Account: "",  // 1. 账户 
					Password: "",  // 2. 密码 
				}

				return cli.Login(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserRegister",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserRegisterReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleIds: nil,  // 8. roleIDs 
					Password: "",  // 9. 密码 
				}

				return cli.UserRegister(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserGetReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Phone: "",  // 3. 手机号 
					CurrPage: 0,  // 4. 页码 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
				}

				return cli.UserGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserUpdate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserUpdateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleId: nil,  // 8. roleID 
				}

				return cli.UserUpdate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "ResetPassword",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.ResetPasswordReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleId: 0,  // 8. roleID 
					Password: "",  // 9. 密码 
				}

				return cli.ResetPassword(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserDelete",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserDeleteReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleId: 0,  // 8. roleID 
					Password: "",  // 9. 密码 
				}

				return cli.UserDelete(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "RoleCreate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.RoleCreateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Code: "",  // 3. 编号 
					Apis: nil,  // 4. 接口 
					Desc: "",  // 5. 描述 
				}

				return cli.RoleCreate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "RoleGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.RoleGetReq{
					Id: 0,  // 1. ID 
					Code: "",  // 2. 编号 
					Name: "",  // 3. 名称 
					CurrPage: 0,  // 4. 页码 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
				}

				return cli.RoleGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "RoleUpdate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.RoleUpdateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Code: "",  // 3. 编号 
					Apis: nil,  // 4. 接口 
					Desc: "",  // 5. 描述 
				}

				return cli.RoleUpdate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "RoleDelete",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.RoleDeleteReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Code: "",  // 3. 编号 
					Apis: nil,  // 4. 接口 
					Desc: "",  // 5. 描述 
				}

				return cli.RoleDelete(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "ApiCreate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.ApiCreateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Url: "",  // 3. 路径 
					Method: "",  // 4. 方法 
					Desc: "",  // 5. 描述 
				}

				return cli.ApiCreate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "ApiGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.ApiGetReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Url: "",  // 3. 路径 
					Method: "",  // 4. 方法 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
					CurrPage: 0,  // 8. 页码 
				}

				return cli.ApiGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "ApiUpdate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.ApiUpdateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Url: "",  // 3. 路径 
					Method: "",  // 4. 方法 
					Desc: "",  // 5. 描述 
				}

				return cli.ApiUpdate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "ApiDelete",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.ApiDeleteReq{
					Id: 0,  // 1. ID 
				}

				return cli.ApiDelete(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceCreate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceCreateReq{
					Name: "",  // 1. 设备名称 
					Code: "",  // 2. 设备编号 
					DeviceTypeId: 0,  // 3. 设备类型编号 
					CheckTime: 0.0,  // 4. 心跳时间 
				}

				return cli.DeviceCreate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceGetReq{
					Name: "",  // 1. 设备名称 
					Code: "",  // 2. 编号 
					Protocol: "",  // 3. 协议 
					DeviceTypeName: "",  // 4. 设备类型名称 
					State: "",  // 5. 设备状态 
					PageSize: 0,  // 6. 页大小 
					StartTime: "",  // 7. 开始时间 
					EndTime: "",  // 8. 结束时间 
					CurrPage: 0,  // 9. 页码 
					Id: 0,  // 10. 设备ID 
				}

				return cli.DeviceGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceUpdate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceUpdateReq{
					Id: 0,  // 1. 设备ID 
					Name: "",  // 2. 设备名称 
					Code: "",  // 3. 设备编号 
					DeviceTypeId: 0,  // 4. 设备类型ID 
					CheckTime: 0.0,  // 5. 心跳时间 
				}

				return cli.DeviceUpdate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceDelete",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceDeleteReq{
					Id: 0,  // 1. 设备ID 
				}

				return cli.DeviceDelete(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceDataReceive",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceDataReceiveReq{
					Data: nil,  // 1. 设备数据，json格式 
				}

				return cli.DeviceDataReceive(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceDataGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceDataGetReq{
					Id: 0,  // 1. 设备ID 
					Name: "",  // 2. 设备名称 
					Code: "",  // 3. 设备编号 
				}

				return cli.DeviceDataGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeCreate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceTypeCreateReq{
					Name: "",  // 1. 设备类型名称 
					Describe: "",  // 2. 简述 
				}

				return cli.DeviceTypeCreate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceTypeGetReq{
					Name: "",  // 1. 设备类型名称 
					PageSize: 0,  // 2. 页大小 
					StartTime: "",  // 3. 开始时间 
					EndTime: "",  // 4. 结束时间 
					CurrPage: 0,  // 5. 页码 
					Id: 0,  // 6. 设备类型ID 
				}

				return cli.DeviceTypeGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeUpdate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceTypeUpdateReq{
					Id: 0,  // 1. 设备类型ID 
					Name: "",  // 2. 设备类型名称 
					Describe: "",  // 3. 简述 
				}

				return cli.DeviceTypeUpdate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeDelete",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.DeviceTypeDeleteReq{
					Id: 0,  // 1. 设备类型ID 
				}

				return cli.DeviceTypeDelete(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserDeviceCreate",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserDeviceCreateReq{
					Account: "",  // 1. 用户账号 
					DeviceCode: "",  // 2. 设备编号 
				}

				return cli.UserDeviceCreate(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserDeviceGet",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserDeviceGetReq{
					UserName: "",  // 1. 用户名称 
					DeviceName: "",  // 2. 设备名称 
					DeviceCode: "",  // 3. 设备编号 
					CurrPage: 0,  // 4. 页码 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
				}

				return cli.UserDeviceGet(ctx, req)
			},
			wantErr: false,
		},


		{
			name: "UserDeviceDelete",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &managerV1.UserDeviceDeleteReq{
					Id: 0,  // 1. ID 
				}

				return cli.UserDeviceDelete(ctx, req)
			},
			wantErr: false,
		},

	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.fn()
			if (err != nil) != tt.wantErr {
				t.Errorf("test '%s' error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
			data, _ := json.MarshalIndent(got, "", "    ")
			fmt.Println(string(data))
		})
	}
}

// performance test service manager api, copy the report to
// the browser to view when the pressure test is finished.
func Test_service_manager_benchmark(t *testing.T) {
	err := config.Init(configs.Path("manager.yml"))
	if err != nil {
		panic(err)
	}
	if len(config.Get().GrpcClient) == 0 {
		t.Error("grpcClient is not set in manager.yml")
		return
	}
	host := fmt.Sprintf("%s:%d", config.Get().GrpcClient[0].Host, config.Get().GrpcClient[0].Port)
	protoFile := configs.Path("../api/manager/v1/manager.proto")
	// If third-party dependencies are missing during the press test,
	// copy them to the project's third_party directory.
	dependentProtoFilePath := []string{
		configs.Path("../third_party"), // third_party directory
		configs.Path(".."),             // Previous level of third_party
	}

	tests := []struct {
		name    string
		fn      func() error
		wantErr bool
	}{

		{
			name: "Login",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.LoginReq{
					Account: "",  // 1. 账户 
					Password: "",  // 2. 密码 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "Login", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserRegister",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserRegisterReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleIds: nil,  // 8. roleIDs 
					Password: "",  // 9. 密码 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserRegister", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserGetReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Phone: "",  // 3. 手机号 
					CurrPage: 0,  // 4. 页码 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserUpdate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserUpdateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleId: nil,  // 8. roleID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserUpdate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "ResetPassword",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.ResetPasswordReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleId: 0,  // 8. roleID 
					Password: "",  // 9. 密码 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "ResetPassword", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserDelete",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserDeleteReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Account: "",  // 3. 账户 
					AvatarUrl: "",  // 4. 头像地址 
					IsValid: 0,  // 5. 是否启用 
					Sex: "",  // 6. 性别 
					Phone: "",  // 7. 电话号码 
					RoleId: 0,  // 8. roleID 
					Password: "",  // 9. 密码 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserDelete", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "RoleCreate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.RoleCreateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Code: "",  // 3. 编号 
					Apis: nil,  // 4. 接口 
					Desc: "",  // 5. 描述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "RoleCreate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "RoleGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.RoleGetReq{
					Id: 0,  // 1. ID 
					Code: "",  // 2. 编号 
					Name: "",  // 3. 名称 
					CurrPage: 0,  // 4. 页码 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "RoleGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "RoleUpdate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.RoleUpdateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Code: "",  // 3. 编号 
					Apis: nil,  // 4. 接口 
					Desc: "",  // 5. 描述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "RoleUpdate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "RoleDelete",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.RoleDeleteReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Code: "",  // 3. 编号 
					Apis: nil,  // 4. 接口 
					Desc: "",  // 5. 描述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "RoleDelete", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "ApiCreate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.ApiCreateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Url: "",  // 3. 路径 
					Method: "",  // 4. 方法 
					Desc: "",  // 5. 描述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "ApiCreate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "ApiGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.ApiGetReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Url: "",  // 3. 路径 
					Method: "",  // 4. 方法 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
					CurrPage: 0,  // 8. 页码 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "ApiGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "ApiUpdate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.ApiUpdateReq{
					Id: 0,  // 1. ID 
					Name: "",  // 2. 名称 
					Url: "",  // 3. 路径 
					Method: "",  // 4. 方法 
					Desc: "",  // 5. 描述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "ApiUpdate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "ApiDelete",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.ApiDeleteReq{
					Id: 0,  // 1. ID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "ApiDelete", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceCreate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceCreateReq{
					Name: "",  // 1. 设备名称 
					Code: "",  // 2. 设备编号 
					DeviceTypeId: 0,  // 3. 设备类型编号 
					CheckTime: 0.0,  // 4. 心跳时间 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceCreate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceGetReq{
					Name: "",  // 1. 设备名称 
					Code: "",  // 2. 编号 
					Protocol: "",  // 3. 协议 
					DeviceTypeName: "",  // 4. 设备类型名称 
					State: "",  // 5. 设备状态 
					PageSize: 0,  // 6. 页大小 
					StartTime: "",  // 7. 开始时间 
					EndTime: "",  // 8. 结束时间 
					CurrPage: 0,  // 9. 页码 
					Id: 0,  // 10. 设备ID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceUpdate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceUpdateReq{
					Id: 0,  // 1. 设备ID 
					Name: "",  // 2. 设备名称 
					Code: "",  // 3. 设备编号 
					DeviceTypeId: 0,  // 4. 设备类型ID 
					CheckTime: 0.0,  // 5. 心跳时间 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceUpdate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceDelete",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceDeleteReq{
					Id: 0,  // 1. 设备ID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceDelete", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceDataReceive",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceDataReceiveReq{
					Data: nil,  // 1. 设备数据，json格式 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceDataReceive", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceDataGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceDataGetReq{
					Id: 0,  // 1. 设备ID 
					Name: "",  // 2. 设备名称 
					Code: "",  // 3. 设备编号 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceDataGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeCreate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceTypeCreateReq{
					Name: "",  // 1. 设备类型名称 
					Describe: "",  // 2. 简述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceTypeCreate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceTypeGetReq{
					Name: "",  // 1. 设备类型名称 
					PageSize: 0,  // 2. 页大小 
					StartTime: "",  // 3. 开始时间 
					EndTime: "",  // 4. 结束时间 
					CurrPage: 0,  // 5. 页码 
					Id: 0,  // 6. 设备类型ID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceTypeGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeUpdate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceTypeUpdateReq{
					Id: 0,  // 1. 设备类型ID 
					Name: "",  // 2. 设备类型名称 
					Describe: "",  // 3. 简述 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceTypeUpdate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "DeviceTypeDelete",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.DeviceTypeDeleteReq{
					Id: 0,  // 1. 设备类型ID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "DeviceTypeDelete", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserDeviceCreate",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserDeviceCreateReq{
					Account: "",  // 1. 用户账号 
					DeviceCode: "",  // 2. 设备编号 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserDeviceCreate", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserDeviceGet",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserDeviceGetReq{
					UserName: "",  // 1. 用户名称 
					DeviceName: "",  // 2. 设备名称 
					DeviceCode: "",  // 3. 设备编号 
					CurrPage: 0,  // 4. 页码 
					PageSize: 0,  // 5. 页大小 
					StartTime: "",  // 6. 开始时间 
					EndTime: "",  // 7. 结束时间 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserDeviceGet", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},


		{
			name: "UserDeviceDelete",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &managerV1.UserDeviceDeleteReq{
					Id: 0,  // 1. ID 
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "UserDeviceDelete", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},

	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := tt.fn()
			if (err != nil) != tt.wantErr {
				t.Errorf("test '%s' error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
		})
	}
}
