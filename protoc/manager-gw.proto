syntax = "proto3";

package api.gateway.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "tagger/tagger.proto";

option go_package = "gateway/api/gateway/v1;v1";

// Default settings for generating swagger documents
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "127.0.0.1:8080"
  base_path: ""
  info: {
    title: "inner_core api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Input a \"Bearer your-jwt-token\" to Value";
      }
    }
  }
};

service Manager {
  // 登录
  rpc Login(LoginReq) returns (LoginRes){
    option (google.api.http) = {
          post: "/api/v1/login"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "登录",
          description: "本接口为用户登录接口",
        };
  };

  // 用户注册
    rpc UserRegister(UserRegisterReq) returns (OperationRes){
       option (google.api.http) = {
                post: "/api/v1/user/register"
                body: "*"
              };
              option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                summary: "用户注册",
                description: "本接口为用户注册接口",
              };
    };
    // 用户查询
    rpc UserGet(UserGetReq) returns (UserGetRes){
       option (google.api.http) = {
                      post: "/api/v1/user/get"
                      body: "*"
                    };
                    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                      summary: "用户查询",
                      description: "本接口为用户查询接口",
                    };
    };
    // 用户修改
    rpc UserUpdate(UserUpdateReq) returns (OperationRes){
     option (google.api.http) = {
                    post: "/api/v1/user/update"
                    body: "*"
                  };
                  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                    summary: "用户修改",
                    description: "本接口为用户修改接口",
                  };
    };
    // 密码重置
    rpc ResetPassword(ResetPasswordReq) returns (OperationRes){
     option (google.api.http) = {
                    post: "/api/v1/user/resetPassword"
                    body: "*"
                  };
                  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                    summary: "用户密码重置",
                    description: "本接口为用户密码重置接口",
                  };};
    // 用户注销
    rpc UserDelete(UserDeleteReq) returns (OperationRes){
     option (google.api.http) = {
                    post: "/api/v1/user/delete"
                    body: "*"
                  };
                  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                    summary: "用户删除",
                    description: "本接口为用户删除接口",
                  };
    };


    // 角色创建
    rpc RoleCreate(RoleCreateReq) returns (OperationRes){
     option (google.api.http) = {
                    post: "/api/v1/role/create"
                    body: "*"
                  };
                  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                    summary: "角色创建",
                    description: "本接口为角色创建接口",
                  };
     };
    // 角色查询
    rpc RoleGet(RoleGetReq) returns (RoleGetRes){
     option (google.api.http) = {
                        post: "/api/v1/role/get"
                        body: "*"
                      };
                      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                        summary: "角色查询",
                        description: "本接口为角色查询接口",
                      };
    };
    // 角色修改
    rpc RoleUpdate(RoleUpdateReq) returns (OperationRes){
     option (google.api.http) = {
                        post: "/api/v1/role/update"
                        body: "*"
                      };
                      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                        summary: "角色修改",
                        description: "本接口为角色修改接口",
                      };
    };
    // 角色删除
    rpc RoleDelete(RoleDeleteReq) returns (OperationRes){
     option (google.api.http) = {
                        post: "/api/v1/role/delete"
                        body: "*"
                      };
                      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                        summary: "角色删除",
                        description: "本接口为角色删除接口",
                      };
    };


    // 接口创建
    rpc ApiCreate(ApiCreateReq) returns (OperationRes){
     option (google.api.http) = {
                        post: "/api/v1/api/create"
                        body: "*"
                      };
                      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                        summary: "接口创建",
                        description: "本接口为接口创建接口",
                      };
    };
    // 接口查询
    rpc ApiGet(ApiGetReq) returns (ApiGetRes){
     option (google.api.http) = {
                            post: "/api/v1/api/get"
                            body: "*"
                          };
                          option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                            summary: "接口查询",
                            description: "本接口为接口查询接口",
                          };
    };
    // 接口修改
    rpc ApiUpdate(ApiUpdateReq) returns (OperationRes){
     option (google.api.http) = {
                                post: "/api/v1/api/update"
                                body: "*"
                              };
                              option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                                summary: "接口修改",
                                description: "本接口为接口修改接口",
                              };
    };
    // 接口删除
    rpc ApiDelete(ApiDeleteReq) returns (OperationRes){
     option (google.api.http) = {
                                post: "/api/v1/api/delete"
                                body: "*"
                              };
                              option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                                summary: "接口删除",
                                description: "本接口为接口删除接口",
                              };
    };

    // 用户设备信息创建
    rpc UserDeviceCreate(UserDeviceCreateReq) returns (OperationRes) {
      option (google.api.http) = {
                                     post: "/api/v1/userDevice/create"
                                     body: "*"
                                   };
                                   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                                     summary: "用户设备信息创建",
                                     description: "本接口为用户信息创建接口",
                                   };
    };
    // 用户设备信息查询
    rpc UserDeviceGet(UserDeviceGetReq) returns (UserDeviceGetRes) {
      option (google.api.http) = {
                                           post: "/api/v1/userDevice/get"
                                           body: "*"
                                         };
                                         option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                                           summary: "用户设备信息查询",
                                           description: "本接口为用户信息查询接口",
                                         };
    };
    // 用户设备信息删除
    rpc UserDeviceDelete(UserDeviceDeleteReq) returns (OperationRes) {
      option (google.api.http) = {
                                           post: "/api/v1/userDevice/delete"
                                           body: "*"
                                         };
                                         option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
                                           summary: "用户信息删除",
                                           description: "本接口为用户信息删除接口",
                                         };
    };
}

// 用户
message User {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 账户
  string account = 3;
  // 4. 头像地址
  string avatarUrl = 4;
  // 5. 是否启用
  uint32 isValid = 5;
  // 6. 性别
  string sex = 6;
  // 7. 电话号码
  string phone = 7;
  // 8. roleID
  uint64 roleId = 8;
  // 9. 密码
  string password =9;
}

// 登录请求参数
message LoginReq {
  // 1. 账户
  string account = 1;

  // 2. 密码
  string password = 2;
}

//登录响应参数
message LoginRes {
  // 1. token
  string token = 1;
}


//用户注册请求参数
message UserRegisterReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 账户
  string account = 3;
  // 4. 头像地址
  string avatarUrl = 4;
  // 5. 是否启用
  uint32 isValid = 5;
  // 6. 性别
  string sex = 6;
  // 7. 电话号码
  string phone = 7;
  // 8. roleIDs
  repeated uint64 roleIds = 8;
  // 9. 密码
  string password =9;
}

//用户查询请求参数
message UserGetReq {
 // 1. ID
 uint64 id = 1;
 // 2. 名称
 string name = 2;
 // 3. 手机号
 string phone = 3;
 // 4. 页码
 uint64 currPage = 4;
 // 5. 页大小
 uint64 pageSize = 5;
 // 6. 开始时间
 string startTime = 6;
 // 7. 结束时间
 string endTime = 7;
}

message UserGetRes {
  repeated User user = 1;
  uint64 count = 2;
}

//用户修改请求参数
message UserUpdateReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 账户
  string account = 3;
  // 4. 头像地址
  string avatarUrl = 4;
  // 5. 是否启用
  uint32 isValid = 5;
  // 6. 性别
  string sex = 6;
  // 7. 电话号码
  string phone = 7;
  // 8. roleID
  repeated uint64 roleId = 8;
}


//用户密码重置请求参数
message ResetPasswordReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 账户
  string account = 3;
  // 4. 头像地址
  string avatarUrl = 4;
  // 5. 是否启用
  uint32 isValid = 5;
  // 6. 性别
  string sex = 6;
  // 7. 电话号码
  string phone = 7;
  // 8. roleID
  uint64 roleId = 8;
  // 9. 密码
  string password =9;
}

//用户注销请求参数
message UserDeleteReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 账户
  string account = 3;
  // 4. 头像地址
  string avatarUrl = 4;
  // 5. 是否启用
  uint32 isValid = 5;
  // 6. 性别
  string sex = 6;
  // 7. 电话号码
  string phone = 7;
  // 8. roleID
  uint64 roleId = 8;
  // 9. 密码
  string password =9;
}



// 角色
message Role {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 编号
  string code = 3;
  // 4. 接口
  repeated uint64 apis = 4;
  // 5. 描述
  string desc = 5;
}


//角色创建请求参数
message RoleCreateReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 编号
  string code = 3;
  // 4. 接口
  repeated uint64 apis = 4;
  // 5. 描述
  string desc = 5;
}


//角色查询
message RoleGetReq {
  // 1. ID
  uint64 id = 1;
  // 2. 编号
  string code = 2;
  // 3. 名称
  string name = 3;
  // 4. 页码
  uint64 currPage = 4;
  // 5. 页大小
  uint64 pageSize = 5;
  // 6. 开始时间
  string startTime = 6;
  // 7. 结束时间
  string endTime = 7;
}

//角色查询响应参数
message RoleGetRes {
  repeated Role role = 1;
  uint64 count = 2;
}

//角色修改
message RoleUpdateReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 编号
  string code = 3;
  // 4. 接口
  repeated uint64 apis = 4;
  // 5. 描述
  string desc = 5;
}

//角色删除
message RoleDeleteReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 编号
  string code = 3;
  // 4. 接口
  repeated uint64 apis = 4;
  // 5. 描述
  string desc = 5;
}


// 接口
message Api {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 路径
  string url = 3;
  // 4. 方法
  string method = 4;
  // 5. 描述
  string desc = 5;
}


//接口创建
message ApiCreateReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 路径
  string url = 3;
  // 4. 方法
  string method = 4;
  // 5. 描述
  string desc = 5;
}


//接口查询
message ApiGetReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 路径
  string url = 3;
  // 4. 方法
  string method = 4;
  // 5. 页大小
  uint64 pageSize = 5;
  // 6. 开始时间
  string startTime = 6;
  // 7. 结束时间
  string endTime = 7;
  // 8. 页码
  uint64 currPage = 8;
}

//接口查询响应参数
message ApiGetRes {
  repeated Api api = 1;
  uint64 count = 2;
}

//接口修改
message ApiUpdateReq {
  // 1. ID
  uint64 id = 1;
  // 2. 名称
  string name = 2;
  // 3. 路径
  string url = 3;
  // 4. 方法
  string method = 4;
  // 5. 描述
  string desc = 5;
}

//接口删除
message ApiDeleteReq {
  // 1. ID
  uint64 id = 1;
}



//操作响应参数，确认操作是否成功
message OperationRes {
  // 1. 状态
  uint32 status = 1;
  // 2. 信息
  string msg = 2;
}

message UserDeviceCreateReq {
  // 1. 用户账号
  string account = 1;
  // 2. 设备编号
  string deviceCode = 2;
}


message UserDeviceGetReq {
  // 1. 用户名称
  string userName = 1;
  // 2. 设备名称
  string deviceName = 2;
  // 3. 设备编号
  string deviceCode = 3;
  // 4. 页码
  uint64 currPage = 4;
  // 5. 页大小
  uint64 pageSize = 5;
  // 6. 开始时间
  string startTime = 6;
  // 7. 结束时间
  string endTime = 7;
}

message UserDevice {
  // 1. 用户设备信息ID
  uint64 id = 1;
  // 2. 用户名称
  string userName = 2;
  // 3. 设备名称
  string deviceName = 3;
  // 4. 设备编号
  string deviceCode = 4;
  // 5. 创建时间
  string createTime = 5;
}

message UserDeviceGetRes {
  // 1. 用户设备信息
  repeated UserDevice userDevice = 1;
  // 2. 数量
  uint64 count = 2;
}

message UserDeviceDeleteReq {
  // 1. ID
  uint64 id = 1;
}

